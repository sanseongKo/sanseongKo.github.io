<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://sanseongko.github.io/tag/algorithm/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://sanseongko.github.io/" rel="alternate" type="text/html" />
  <updated>2021-07-01T02:17:51+09:00</updated>
  <id>https://sanseongko.github.io/tag/algorithm/feed.xml</id>

  
  
  

  
    <title type="html">SanseongKo’s Blog | </title>
  

  
    <subtitle>온리 공부를 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Algorithm Greedy(탐욕법)에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-greedy" rel="alternate" type="text/html" title="Algorithm Greedy(탐욕법)에 관하여" />
      <published>2021-06-11T00:00:00+09:00</published>
      <updated>2021-06-11T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-greedy</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-greedy">&lt;p&gt;오늘은 알고리즘 중 하나인 Greedy에 관하여 알아보도록 하겠다.&lt;/p&gt;

&lt;h3&gt;Greedy&lt;/h3&gt;
&lt;p&gt;Greedy 탐욕법 알고리즘은 결과까지는 생각하지 않고 매 순간 최선이라고 생각되는 것을 선택해 결과까지 도달하는 알고리즘이다. 설명과 같이 매 순간 최
선인 선택을 하고 그 이후의 선택은 이후에 판단하기 때문에 언제나 옳은 알고리즘은 아닐 수 있다. 그렇기 때문에, 현상황에서 선택하는 최선의 수를 선택
한다면 결과도 최선이 되는 경우에 사용하여야 알맞다.
보통은 활동 선택 문제, 거스름돈 문제, 최소 신장 트리, 다익스트라 알고리즘에 활용이 가능하며, 살펴보다면 결국 매순간 최적의 선택을하고 그 선택들이
다음 선택과 전혀 무관하더라도 최적의 경우를 찾을 수 있는 문제에 사용이 가능한 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;탐욕범을 위한 문제&lt;/b&gt;
탐욕법의 정의이고, 나머지는 문제를 풀어보며 어떻게 접근하여야 할지 생각해 봐야하겠다. 추가적인 문제를 다룰 경우 추가 포스팅 예정임.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 알고리즘 중 하나인 Greedy에 관하여 알아보도록 하겠다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm 완전 탐색에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-Exhaustive-Search" rel="alternate" type="text/html" title="Algorithm 완전 탐색에 관하여" />
      <published>2021-06-01T00:00:00+09:00</published>
      <updated>2021-06-01T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-Exhaustive%20Search</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-Exhaustive-Search">&lt;p&gt;오늘은 알고리즘 중 하나인 완전 탐색 알고리즘에 대하여 알아보려고 한다.&lt;/p&gt;

&lt;h3&gt;완전 탐색(Exhaustive Search)이란?&lt;/h3&gt;

&lt;p&gt;완전 탐색이란, 가능한 경우의 수를 모두 구하여 답을 찾는 &lt;b&gt;방법&lt;/b&gt;이다. 알고리즘이라고 하기 보단 답을 찾는 방법이라고 할 수 있다.
답을 찾는 방법이고 경우의 수가 너무나도 많아질 경우엔 모든 경우의 수를 확인하는 것은 너무 어렵기 때문에 완전 탐색에 주로 사용되는 알고리즘 기법들
또는 테크닉들이 있다.&lt;/p&gt;

&lt;h3&gt;사용되는 알고리즘 기법, 테크닉&lt;/h3&gt;

&lt;p&gt;완전 탐색의 경우 N의 크기가 작을 때, 시간 복잡도가 N의 지수승, 팩토리얼 꼴로 나올 때 많이 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;단순 탐색&lt;/b&gt;&lt;br /&gt;
알고리즘 기법을 사용하지 않고, 반복문과 조건문등을 이용하여 가능한 모든 경우를 만들어 답을 구하는 방법이다. 매우 비효율 적이기 때문에 가급적이면
쓰이지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;비트 마스크&lt;/b&gt;
&lt;br /&gt;
비트란, 컴퓨터에서 사용되는 2진 숫자로 되어있는 최소 단위이다. 이러한 이진수를 기반으로 0이면 true 1이면 false 혹은 2진수를 십진수로 표한 하는
형태로 사용이 가능하다.
예를 들면, 배열이 있고 그 배열의 부분만 들어있는 배열이 있다고 해보면,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;부분 집합의 배열을 전체 배열에 인덱스에 비교하여 boolean형태의 배열을 만들 수도 있다(ex.{1,2,3} =&amp;gt; {1,1,1,0,0}). 하지만 이럴 경우 많은 메모리
사용과 오버헤드를 증가시킬 수 있다. 따라서, 비트마스크를 이용하여 정수형태로 나타낼 수 있다.
{1,2,3,4,5} =&amp;gt; 11111(2) =&amp;gt; 31&lt;br /&gt;
{1,2,3} =&amp;gt; 11100(2) =&amp;gt; 28&lt;br /&gt;
{2,4,5} =&amp;gt; 01011(2) =&amp;gt; 11&lt;br /&gt;
{1,2} =&amp;gt; 11000(2) =&amp;gt; 24&lt;br /&gt;
{4,5} =&amp;gt; 00011(2) =&amp;gt; 3&lt;br /&gt;
이렇다고 한다면 {1,2,3}의 부분 집합의 배열은 28의 정수형태로 표현이 가능하다는 말이다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;재귀 함수&lt;/b&gt;
&lt;br /&gt;
재귀 함수란 메소드에서 자기 자신을 다시 호출하여 작업을 수행하는 방식의 함수를 의미한다. 이렇듯, 같은 함수를 자기 자신이 계속해서 호출하여 모든 탐색을
진행할 수 있다는 것과 동일하다. 다만, 메모리를 많이 차지하기 때문에 성능이 반복문에 비하여 느리고, 적절히 빠져나오지 못하게 만든다면, 무한히 호출하기
때문에 코드를 짤 때 유의 해줘야한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;순열&lt;/b&gt;
&lt;br /&gt;
순열이란 서로 다른 n개의 집합에서 순서대로 늘어놓은 경우의 수를 얘기하며, 완전 탐색의 대표적인 유형이다. 또한, 재귀 함수를 이용하여 수를 채워나가지만,
n이 커질 수록 처리시간이 길어지므로, n이 크기가 작아야한다. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;BFS(너비 우선 탐색)/DFS(깊이 우선 탐색)&lt;/b&gt;알고리즘도 같이 사용되긴하지만, 따로 다룰 생각이므로 다음 포스팅에서 소개하려고 한다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 알고리즘 중 하나인 완전 탐색 알고리즘에 대하여 알아보려고 한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm 정렬에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-sort" rel="alternate" type="text/html" title="Algorithm 정렬에 관하여" />
      <published>2021-05-31T00:00:00+09:00</published>
      <updated>2021-05-31T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-sort</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-sort">&lt;p&gt;오늘은 정렬의 종류와 각 종류의 장단점에 대하여 알아보려한다. &lt;br /&gt;
여러가지 정렬이 있지만 기본적으로 그리고 내가 알고 싶은 정렬에 대하여 알아보려한다.&lt;/p&gt;

&lt;h3&gt;선택 정렬(Selection Sort)&lt;/h3&gt;
&lt;p&gt;선택 정렬은 집합 내에서 가장 작은 수를 선택하고 교환하는 것을 반복하는 정렬이다.
&lt;img src=&quot;./assets/built/images/algorithm/sort/selectionsort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
처음 인덱스에서 제일 작은 수를 찾아 교환하게 된다. 그 이후 비교하는 수의 인덱스를 하나씩 늘려가며 작은 수를 찾는 것을 반복한다.
&lt;br /&gt;
선택 정령은 구현이 쉬운 편에 속하며, 비교 횟수는 많지만 교환 횟수는 적기 때문에 많은 교환이 자료 상태에서 효율적으로 사용된다.&lt;/p&gt;

&lt;h3&gt;삽입 정렬(Insertion Sort)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/sort/insertionsort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진과 함께 이해하면 쉽다. 선택된 수와 그 수의 왼쪽과 비교하여 선택된 수보다 작은 수가 나올 때까지 정렬하는 방법이다.&lt;/p&gt;

&lt;h3&gt;버블 정렬(Bubble Sort)&lt;/h3&gt;
&lt;p&gt;버블 정렬은 선택된 값의 좌측 값이 선택된 값보다 크다면 교환하는 방법을 말한다.
좌측 값만 비교하면 되기 때문에 구현이 단순하다.
&lt;img src=&quot;./assets/built/images/algorithm/sort/bubblesort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;선택 정렬, 삽입 정렬, 버블 정렬 모두 O(N^2)의 시간 복잡도를 가지고 있다. 다만 실제로는, 선택 정렬이 버블 정렬보다 조금 더 빠르다. 또한,
삽입 정렬의 경우 최선의 경우엔 O(N)의 시간복잡도를 가져 굉장히 빠른 정렬 방법이 될 수 있고, 이러한 이유로 다른 정렬 알고리즘의 일부로 사용되기도 한다.&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;쉘 정렬(Shell Sort)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/sort/shellsort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;쉘 정령은 선택 정렬과 개념이 같은데 차이가 있는 점은 쉘 정렬은 간격만큼 옆으로 이동한다는 것이다.
사진에서 보이듯 간격을 설정하고 그 간격의 크기를 줄여나가면서 정렬을 해나간다. 
시간복잡도는 평균 O(N^1.5)이자만 최악의 경우O(N^2)의 시간복잡도를 가지게 된다.&lt;/p&gt;

&lt;h3&gt;퀵 정렬(Quick Sort)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/sort/quicksort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
퀵 정렬은 축 값을 지정하고 그 축의 촤측 처음 인덱스 부터 오른쪽으로 이동하며, 자신보다 크거나 같은 값을 비교하여 교환하고 우측 끝 인덱스 부터 왼
쪽으로 이동하며, 자신보다 작거나 같은 값을 비교하여 교환한다. 그 이후 사진에서 보이는 대로 left 인덱스가 right 인덱스보다 크다면 처음 배열을 분할한다.
배열이 분리되면 축 값을 다시 잡고 위의 과정을 반복하여 정렬한다.
시간 복잡도에서는 보통 O(NlogN)으로 실행 시간이 준수한 편이지만, 축값에 따라서 시간복잡도가 크게 달라지며, 최악(역순)일 경우 O(N^2)의 시간 복잡
도를 가지기 때문에 축 값을 잘 지정하는 것이 좋다.&lt;/p&gt;

&lt;h3&gt;병합 정렬(Merge Sort)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/sort/mergesort.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
병합 정렬은 분할할 부분의 값을 정하고 그 부분을 기준으로 최소 단위까지 나누어 병합시에 각 부분을 순차 비교 후 임시 배열에 삽입하고, 원래 배열에 
임시 배열을 넣어준다. 이 과정을 반복하는 것이 병합 정렬이다.
퀵 정렬과 비슷하게 원래 배열을 나누어 정렬하는 정렬 법이다. 그렇기 때문에 분할하는 과정에서 logN만큼의 시간이 걸리고 결국 O(NlogN)의 시간 복잡도를
가지게 된다. 다만, 퀵 정렬과 달리 분할해줘야 하는 기준점 설정없이 절반으로 나누어 분할하기 때문에 기준점에 따라 시간이 증가하거나 줄어들지 않는다.
따라서 항상 같은 시간복잡도를 가지게 되고 안정성이 있기 때문에, 정렬법들중 준수한 정렬 법이다. 
하지만, 분할하여 임시배열에 배열을 분할된 배열을 저장하다보니, 추가적인 메모리가 필요하고, 이를 기준으로 퀵을 써야할지 병합을 써야할지 기준을 정하면 된다.&lt;/p&gt;

&lt;h3&gt;힙 정렬(Heap Sort)&lt;/h3&gt;
&lt;p&gt;힙정렬은 힙알고리즘을 기본으로 짜여진 정렬이다. 그렇다면 루트 노드에는 항상 제일 우선순위인 값이 삽입되어 있을 것이다. 그렇다면 그 루트를 출력하고
힙에서 제거한다. 이 과정을 반복하여 정렬하는 방법이다.
힙 정렬은 추가적인 메모리를 필요로 하지 않기 때문에, 항상 O(NlogN)의 시간 복잡도를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
출처: https://namu.wiki/w/%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&lt;br /&gt;
출처: https://yabmoons.tistory.com/250 [얍문’s Coding World..]&lt;br /&gt;
출처: https://roka88.dev/98 [이병록의 개발 블로그]&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 정렬의 종류와 각 종류의 장단점에 대하여 알아보려한다. 여러가지 정렬이 있지만 기본적으로 그리고 내가 알고 싶은 정렬에 대하여 알아보려한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm Heap에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-heap" rel="alternate" type="text/html" title="Algorithm Heap에 관하여" />
      <published>2021-05-28T00:00:00+09:00</published>
      <updated>2021-05-28T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-heap</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-heap">&lt;p&gt;오늘은 자료구조 힙에 관하여 알아보자.&lt;/p&gt;

&lt;h3&gt;완전 이진 트리&lt;/h3&gt;
&lt;p&gt;힙 자료구조를 알아보기 전에 완전 이진 트리에 관하여 알아둬야 할 필요가 있다. 
완전 이진 트리란 이진 트리증 왼쪽부터 차례대로 채워져 있는 트리를 의미한다. 사진으로 보면 더욱 쉽게 이해가 가능하다.
&lt;img src=&quot;./assets/built/images/algorithm/heap/binarytree.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진에서 왼쪽은 왼쪽부터 차례대로 채워져 있는 상태이므로 완전 이진 트리라 할 수 있으며, 사진의 오른쪽은 왼쪽 노드가 다 채워져 있지 않은 상태
이기 때문에 완전 이진 트리가 아니다.&lt;/p&gt;

&lt;h3&gt;힙(Heap) 자료구조&lt;/h3&gt;
&lt;p&gt;자료 구조 힙이란, 완전 이진 트리의 일종으로 우선순위 큐를 구현할때 자주 사용되는 알고리즘이다. 또한, 여러개의 값들 중 최댓값이나 최솟값을 빠르게
찾아낼 수 있도록 만들어진 자료구조이다. 힙은 일종의 반정렬 상태를 유지하며, 중복된 값을 허용한다.&lt;/p&gt;

&lt;p&gt;힙에서 부모 노드와 자식 노드의 관계는 아래의 규칙을 따른다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;왼쪽 자식의 인덱스 = (부모의 인덱스)*2&lt;/li&gt;
  &lt;li&gt;오른쪽 자식의 인덱스 = (부모의 인덱스)*2+1&lt;/li&gt;
  &lt;li&gt;부모의 인덱스 = (자식의 인덱스)/2
&lt;img src=&quot;./assets/built/images/algorithm/heap/heapnode.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
&lt;b&gt;힙의 종류&lt;/b&gt;
-최대 힙
    &lt;ul&gt;
      &lt;li&gt;부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진트리를 의미한다.
-최소 힙&lt;/li&gt;
      &lt;li&gt;부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리를 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/heap/heaptree.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;힙의 삽입 과정&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;힙에 새로운 요소가 들어오면, 힙의 마지막 노드에 이어서 삽입하게 된다.&lt;/li&gt;
  &lt;li&gt;새로운 노드를 부모노드들과 교환하여 힙의 성질을 만족시킨다.
아래의 과정으로 확인할 수 있다.
&lt;img src=&quot;./assets/built/images/algorithm/heap/heapprogress.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;힙의 삭제 과정&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최대 힙에서 최대값은 루트 노드(1번노드)이므로 루트노드가 삭제된다&lt;/li&gt;
  &lt;li&gt;삭제된 루트 노드엔 힙의 가장 마지막 노드를 가져와서 위치 시킨 뒤&lt;/li&gt;
  &lt;li&gt;자식 노드들과 비교하여 힙을 재구성한다.
아래의 과정으로 확인할 수 있다.
&lt;img src=&quot;./assets/built/images/algorithm/heap/heapdelete.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 자료구조 힙에 관하여 알아보자.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm Stack and Queue에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-stackqueue" rel="alternate" type="text/html" title="Algorithm Stack and Queue에 관하여" />
      <published>2021-05-27T00:00:00+09:00</published>
      <updated>2021-05-27T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-stackqueue</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-stackqueue">&lt;p&gt;오늘은 스택과 큐라는 알고리즘을 알아보도록 하겠다. 
스택과 큐를 같이 묶어서 포스팅하는 이유는 비슷한 느낌이자만 차이가 분명하게 존재하기 때문이다.&lt;/p&gt;

&lt;h3&gt;스택(Stack)이란?&lt;/h3&gt;
&lt;p&gt;스택은 Last In First Out (LIFO), 즉 &lt;b&gt;후입선출&lt;/b&gt;구조를 가지고 있다.
또한, 한쪽에서 삽입과 삭제가 이루어 지는 구조이기도 하다.
&lt;img src=&quot;./assets/built/images/algorithm/stackqueue/stack.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
위의 사진은 흔히 볼 수 있는 스택의 형태를 가지고 있고, push는 자료의 삽입, pop은 자료의 배출이라고 보면 된다. 사진에서도 볼 수 있듯 한쪽에서 
삽입되고, 한 쪽에서 삭제가 되는 것을 볼 수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;그럼 스택은 어디서 쓰일까?&lt;b&gt; 예를 들자면, 브라우저의 뒤로가기 버튼을 생각하면된다. 가장 마지막에 거쳐온 곳을 보여줘야하니 제일 마지막의 정보를
제일 처음 보여준다와 의미가 통한다.&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;큐(Queue)란?&lt;/h3&gt;
&lt;p&gt;큐는 스택과 다르게 First In First Out(FIFO) 즉, &lt;b&gt;선입선출&lt;/b&gt;구조를 가지고 있다. 스택은 한쪽에서 삽입과 삭제가 일어난다고 했는데, 그렇다면 큐는?
큐는 제일 먼저들어간 것이 제일 처음 나오게 되므로, 삽입되는 곳에서는 이미 마지막으로 들어온 것이 버티고 있어 나가지 못한다. 그렇기 때문에 한쪽 끝(front)에서
삽입되어 다른 쪽 끝(rear)에서 삭제된다.
&lt;img src=&quot;./assets/built/images/algorithm/stackqueue/queue.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
사진으로 보아도 스택과는 다르게 push되는 곳과 pop되는 곳의 위치가 다른 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;그럼 큐는 어디서 쓰일까?&lt;b&gt; 예를 들자면, 대기줄이 필요할때 먼저온 사람이 먼저 정보를 받는 형태 또는 데이터 유입속도가 데이터 소모속도 보다
빠를때 쓰일 수 있다.&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;Java에서 Stack 사용법&lt;/h3&gt;
&lt;p&gt;Stack 선언&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elelment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//element는 스택에 담기는 자료형이 어떤 자료형인지&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Stack 값 삽입&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Stack 값 삭제&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//제일 마지막에 들어간 수 출력과 삭제&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//스택에 저장되어 있는 전체 값 삭제&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Stack 처음 나올 값 확인&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//값만 출력 삭제x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Stack의 기타 메소드&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//스택의 크기 출력(ex.값이 2개들어 있다면 2를 출력)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//스택이 비어 있는지 체크&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//스택에 해당 값이 있는지 체크(boolean으로 리턴)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Java에서 Queue 사용법&lt;/h3&gt;
&lt;p&gt;Queue 선언&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elelment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//element는 큐에 담기는 자료형이 어떤 자료형인지&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;자바에서 큐는 LinkedList로 객체선언을 해주어야 사용이 가능함을 잊지말자.
Queue 값 삽입&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//삽입에 성공하면 true를 반환하고, 큐에 여유 공간이 없어 삽입에 실패하면 IllegalStateException을 발생&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Queue 값 삭제&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//제일 마지막에 들어간 수 출력과 삭제(비어있다면 null)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//큐에 첫번째 값 제거&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//큐 초기화&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Queue 처음 나올 값 확인&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//값만 출력 삭제x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 스택과 큐라는 알고리즘을 알아보도록 하겠다. 스택과 큐를 같이 묶어서 포스팅하는 이유는 비슷한 느낌이자만 차이가 분명하게 존재하기 때문이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm Hash에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-hash" rel="alternate" type="text/html" title="Algorithm Hash에 관하여" />
      <published>2021-05-25T00:00:00+09:00</published>
      <updated>2021-05-25T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-hash</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-hash">&lt;p&gt;오늘은 Hash에 대하여 정리를 해보려고 한다.&lt;/p&gt;

&lt;p&gt;주 언어가 Java이다보니 HashMap은 많이 써보았지만, 정확하게 정리를 해본적은 없는 듯하여 정리를 해보려한다.&lt;/p&gt;

&lt;p&gt;내가 알고 있던 Hash에선 키와 값이 있으며, 키를 인덱스로 가지고 있기 때문에 시간복잡도가 O(1)이라는 것.&lt;/p&gt;

&lt;h3&gt;1 해시&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;해시는 임의의 크기를 가진 데이터를 고정된 데이터 크기로 변화시키는 것을 말하며,&lt;/li&gt;
  &lt;li&gt;해시함수를 사용하여 값을 계산하여 나온 고정된 길이의 값을 해시값이라고 부른다.&lt;/li&gt;
  &lt;li&gt;여러 분야에 사용되며, 복잡하지 않은 알고리즘으로 이루어져 CPU,메모리 등 시스템 자원을 덜 소모한다고 한다.&lt;/li&gt;
  &lt;li&gt;여러분야 사용되고 여러가지(MDn, SHA-n 등) 해시 알고리즘이 있지만(자세하게 다룰일이 있으면 추가해야지)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/hash/hash_hash.png&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;2 해시 충돌&lt;/h3&gt;
&lt;p&gt;해시 충돌은 해시함수를 거친 키값이 같은 값들. 즉, 다른 데이터의 키 값(해시값)들이 동일할 경우 해시 충돌이 발생한다.
이 충돌은 해시 테이블의 성능을 떨어뜨린다. 
해시 충돌을 방지하려면 해시 함수를 잘 정의하면 된다. 하지만 해시함수의 입력값은 무한하지만, 
출력값의 가짓수는 유한(출력값, 즉 키가 유한하지 않다면 해시기법을 사용하는 의미가 없다.)하므로 
해시 충돌은 반드시 발생한다.(비둘기집 원리)&lt;/p&gt;

&lt;p&gt;이러한 해시충돌을 방지할 방법은 크게 2가지가 있다.
&lt;b&gt;체이닝(Chaining)&lt;/b&gt;
버킷내에 LinkedList를 할당하여, Bucket에 데이터를 저장하다가 해시 충돌이 발생하면 연결리스트로 데이터를 연결하는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;개방 주소법(Open Addressing)&lt;/b&gt;
해시 충돌이 발생하면 다른 Bucket에 데이터를 삽입하는 방식이다.
체이닝은 주소값은 동일한 상태로 LinkedList를 이용하여 늘려가기 때문에, 주소값이 변경되지는 않는다는 부분과 차이가 있다.
&lt;img src=&quot;./assets/built/images/algorithm/hash/hash_chaining1.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3가지 개방 주소법&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;선형 탐색&lt;Linear Probing=&quot;&quot;&gt;&amp;lt;/b&amp;gt;: 해시 충돌 시 다음 버킷 혹은 몇개를 건너뛰어 데이터를 삽입&lt;/Linear&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;제곱 탐색&lt;Quadratic Probing=&quot;&quot;&gt;&amp;lt;/b&amp;gt;: 해시 충돌 시 제곱만큼 건너뛴 버켓에 데이터를 삽입&lt;/Quadratic&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;이중 해시&lt;Double Hashing=&quot;&quot;&gt;&amp;lt;/b&amp;gt;: 해시 충돌 시 다른 해시 함수를 한 번 더 적용한 결과를 이용&lt;/Double&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/hash/hash_openaddressing.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;해시를 이용한 자료구조&lt;/h3&gt;
&lt;p&gt;해시를 이용한 자료구조엔 &lt;b&gt;HashMap, HashTable&lt;/b&gt;이 있다.
둘의 차이는 &lt;b&gt;동기화 지원&lt;/b&gt;이 가능하냐 안하냐의 차이(synchronized)가 있다고 한다.&lt;/p&gt;

&lt;h3&gt;해시 자료구조의 시간 복잡도&lt;/h3&gt;
&lt;p&gt;해시함수로 만들어진 키값들은 고유한 인덱스를 가지게 되어 바로 접근할 수 있다.
그러므로 평균 O(1)의 시간복잡도를 가지고 있지만, 데이터 충돌이 발생할 경우 Chaining에 연결된 리스트들까지
검색해야 하므로 O(N)까지 시간복잡도가 증가할 수 있다.
충돌을 방지하는 방법들은 데이터의 규칙성(클러스터링)을 방지하기 위한 방식이지만 공간을 많이 사용한다는 치명적인 단점이 있다.&lt;/p&gt;

&lt;p&gt;만약 테이블이 꽉 차있는 경우라면 테이블을 확장해주어야 하는데, 이는 매우 심각한 성능의 저하를 불러오기 때문에 가급적이면 확장을 하지 않도록 테이블을 설계해주어야 한다.&lt;/p&gt;

&lt;p&gt;(통계적으로 해시 테이블의 공간 사용률이 70% ~ 80%정도가 되면 해시의 충돌이 빈번하게 발생하여 성능이 저하되기 시작한다고 한다.)&lt;/p&gt;

&lt;p&gt;또한 해시 테이블에서 자주 사용하게 되는 데이터를 Cache에 적용하면 효율을 높일 수 있다. 자주 hit하게 되는 데이터를 캐시에서 바로 찾음으로써 해시 테이블의 성능을 향상시킬 수 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/algorithm/hash/hash_chaining_time.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처 
https://mangkyu.tistory.com/102 [MangKyu’s Diary]
https://preamtree.tistory.com/20 [Preamtree의 행복로그]&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
.startsWith();
.toLowerCase();
.toUpperCase();
.toCharArray();
StringBuilder sb = new StringBuilder();
sb.append(ch[i]);
.sort();
.subString
PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&amp;lt;&amp;gt;();&lt;/Integer&gt;&lt;/p&gt;

&lt;p&gt;//int형 priorityQueue 선언 (우선순위가 높은 숫자 순)
PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&amp;lt;&amp;gt;(Collections.reverseOrder());&lt;/Integer&gt;&lt;/p&gt;

&lt;p&gt;Queue&lt;Integer&gt; queue = new LinkedList&amp;lt;&amp;gt;();&lt;/Integer&gt;&lt;/p&gt;

&lt;p&gt;Stack&lt;Integer&gt; stack = new Stack&amp;lt;&amp;gt;();&lt;/Integer&gt;&lt;/p&gt;

&lt;p&gt;Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();&lt;/p&gt;

&lt;p&gt;Set&lt;String&gt; hashSet = new HashSet&lt;String&gt;();&lt;/String&gt;&lt;/String&gt;&lt;/p&gt;

&lt;p&gt;import java.util.*&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">오늘은 Hash에 대하여 정리를 해보려고 한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Algorithm 동적 계획법에 관하여</title>
      <link href="https://sanseongko.github.io/algorithm-dynamicprogramming" rel="alternate" type="text/html" title="Algorithm 동적 계획법에 관하여" />
      <published>2021-05-25T00:00:00+09:00</published>
      <updated>2021-05-25T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/algorithm-dynamicprogramming</id>
      <content type="html" xml:base="https://sanseongko.github.io/algorithm-dynamicprogramming">&lt;h3&gt;동적 계획법&lt;/h3&gt;
&lt;p&gt;동적 계획법이란, 보다 큰 문제를 작은 문제로 나누어 푸는 방식을 뜻한다. 이 부분은 분할과 정복과 유사한데, 분할과 정복은 중복이 절대 일어날 수 없다
는 것이고, 동적 계획법에서는 문제가 중복된다는 점이다. 이 부분에서 동적 계획법은 중복으로 일어난 작은 문제에 대하여 그 문제에 사용되었던 방식을, 값을
캐시(cache)라 불리는 메모리에 미리 넣어두고 중복되는 문제를 마주칠 시에 미리 저장되어 있던 값을 꺼내어 사용하는 것이다.(Memoization 메모이제이션)
&lt;img src=&quot;./assets/built/images/algorithm/dynamic/dynamic.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
위의 사진에서 보이는 대로 f(3)의 f(2)의 검은색 부분이 겹치기 때문에, 이 값들은 캐시에 저장해두고 쓸 수 있다. 미리 값을 정해두고 계산을 하는 것이기
때문에 시간이 단축된다.&lt;/p&gt;

&lt;h3&gt;동적 계획법 조건&lt;/h3&gt;
&lt;p&gt;동적 계획법은 2가지 조건을 만족하여야 동적 계획법으로 문제를 풀 수 있다. 첫 번째는, 겹치는 부분이 있어야하고(overlapping subproblem), 최적의
부분 구조가 있어야 한다.
&lt;b&gt;1. Overlapping Subproblem&lt;b&gt;&lt;br /&gt;
보통은 피보나치 수열을 예로들어, 이 부분을 설명할 수 있다. 피보나치 수열의 경우, Fn = F(n-1)+F(n-2)의 즉, 앞의 두수를 더하면 다음 수가 되는 것이다.
이럴 경우, 재귀함수로 표현할 시 return 값이 f(n-1)+f(n-2)로 본인의 메소드를 다시 불러오게 된다.(n=인자값) 앞의 두수는 이미 앞에서 계산할 때 
계산이 된 수이므로, 다시 계산할 필요없이 cache에 담아두고 빠르게 찾아쓰자는 것이다. 이렇게 겹치는 부분이 우선 존재해야 한다.&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. Optimal Substructure&lt;/b&gt;&lt;br /&gt;
최적 부분 구조는 어떤 문제의 최적의 해결책이 그 부분 문제의 최적의 해결책으로 부터 설계될 수 있다는 것을 가르킨다. 피보나치를 예로 들자면 100번째 항은
항상 99과 98의 합과 같다. 또한, 각각 99와 98은 98과97의 합 97과 96의 합과 같다. 이렇듯, 부분의 문제의 해결책이 보다 큰 문제의 해결책이 되는 경우가
이에 해당한다.&lt;/p&gt;

&lt;h3&gt;동적 계획법 구현 방식&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;1. Top-down&lt;/b&gt;&lt;br /&gt;
말그대로 위에서 부터 아래로, 큰 문제(Fn)를 작은 문제(F(n-1)+F(n-2)로 나누어 작은 문제부터 풀고 큰 문제를 푸는 것을 가르킨다. 피보나치 수열을 계산할 떄 재귀함수로 
푸는 것이 이에 해당한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. Bottom-up&lt;/b&gt;&lt;br /&gt;
탑 다운과 반대로 문제 크기가 작은 것부터 큰것으로 푼다. 작은 것부터 차례대로 풀었기 때문에 큰 문제를 당연히 풀 수 있으며, 반복하면 가장 큰 문제를
풀 수 있게 된다. 보통 피보나치 수열에선 for문을 사용하여 i가 2부터 n까지(0과 1은 정해져 있음) 작은 문제부터 풀어 나가게 된다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">동적 계획법 동적 계획법이란, 보다 큰 문제를 작은 문제로 나누어 푸는 방식을 뜻한다. 이 부분은 분할과 정복과 유사한데, 분할과 정복은 중복이 절대 일어날 수 없다 는 것이고, 동적 계획법에서는 문제가 중복된다는 점이다. 이 부분에서 동적 계획법은 중복으로 일어난 작은 문제에 대하여 그 문제에 사용되었던 방식을, 값을 캐시(cache)라 불리는 메모리에 미리 넣어두고 중복되는 문제를 마주칠 시에 미리 저장되어 있던 값을 꺼내어 사용하는 것이다.(Memoization 메모이제이션) 위의 사진에서 보이는 대로 f(3)의 f(2)의 검은색 부분이 겹치기 때문에, 이 값들은 캐시에 저장해두고 쓸 수 있다. 미리 값을 정해두고 계산을 하는 것이기 때문에 시간이 단축된다.</summary>
      

      
      
    </entry>
  
</feed>
