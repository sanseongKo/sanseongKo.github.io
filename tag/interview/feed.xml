<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://sanseongko.github.io/tag/interview/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://sanseongko.github.io/" rel="alternate" type="text/html" />
  <updated>2021-07-21T20:16:16+09:00</updated>
  <id>https://sanseongko.github.io/tag/interview/feed.xml</id>

  
  
  

  
    <title type="html">SanseongKo’s Blog | </title>
  

  
    <subtitle>온리 공부를 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">기술 면접 예상 질문(객체지향의 정의와 특징)</title>
      <link href="https://sanseongko.github.io/interview" rel="alternate" type="text/html" title="기술 면접 예상 질문(객체지향의 정의와 특징)" />
      <published>2021-07-21T00:00:00+09:00</published>
      <updated>2021-07-21T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/interview</id>
      <content type="html" xml:base="https://sanseongko.github.io/interview">&lt;h1&gt;객체지향의 정의&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;객체가 중심&lt;/b&gt;이 되며, 누가 어떤 일을 할 것인지가 핵심이다.(절차지향: 기능 중심으로 무엇을 어떤 ‘절차’로 할 것인지가 포인트) 필요한 객체들을 파악하고,
객체들의 역할을 정의하고 객체들간의 상호작용으로 프로그램을 구현하는 것을 의미한다. (객체는 실제하는 모든 것을 객체라고 할 수 있고, 그렇게 때문에 객체간의 상호작용들을
실제 각 사물들의 상호작용을 이해하는 것을 생각하면 쉬울 것 같다.)&lt;/p&gt;

&lt;h1&gt;객체지향의 특징&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;b&gt;추상화&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;객체들의 공통적인 기능이나 속성(특징)을 도출하는 것을 의미하고 자바에서는 클래스를 정의하는 것이 추상화라 할 수 있다.&lt;/li&gt;
      &lt;li&gt;반복되는 부분을 계속 정의하는 것이 아닌 공통적인 속성을 뽑아내어 추상시켜 필요할 때마다 객체로 만들어 사용하는 것을 의미한다고 생각한다.
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;캡슐화&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;실제로 구현되는 부분은 외부에 드러나지 않도록 정보를 은닉하는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;객체가 독립적으로 역할을 수행할 수 있도록 데이터와 기능을 하나로 묶는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;코드가 묶여 있기 때문에 오류가 없어 편리하다.(외부의 객체가 특정 객체의 데이터에 직접 접근하거나 변경할 수 없기 때문)&lt;/li&gt;
      &lt;li&gt;데이터를 보지 않고 외부와 상호작용할 떄 메소드를 사용하여 통신한다.(보통 Library로 만들어 업그레이드하여 사용이 가능하다.)
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;상속성&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;하나의 클래스가 가진 특징을 다른 클래스가 그대로 물려받는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;이미 작성된 클래스를 받아 새로운 클래스로 생성하는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;기존코드를 재사용할 수 있다.
&lt;br /&gt;
4.&lt;b&gt;다형성&lt;/b&gt;&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;약간 다른 방법으로 동작하는 함수를 동일한 이름으로 호출 -&amp;gt; 연결된 객체에 의존&lt;/li&gt;
      &lt;li&gt;오버라이딩: 부모클래스의 메소드와 이름과 매개변수는 같지만 &lt;b&gt;내부 소스코드&lt;/b&gt;가 재정의 된 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;오버로딩: 같은 이름의 함수를 여러개 정의하고, 매개변수를 다르게 설정하여 같은 이름의 메소드를 경우에 따라 호출하는 것을 의미한다.
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;객체 지향의 장점&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;생산성이 향상된다 -&amp;gt; 재사용을 지향하기 때문(다형성, 객체, 캡슐화)으로, 소프트웨어를 자성할 때의 부담을 줄인다.(코드의 재사용, 추상화 시켜놓은 것들이기 때문)&lt;/li&gt;
  &lt;li&gt;현실 세계의 것들을 객체로 만들었기 때문에 우리가 생각하는 것 현실에서 일어나는 것들을 프로그래밍화하기 쉽다.&lt;/li&gt;
  &lt;li&gt;유지보수(프로그램 수정, 추가 등)이 뛰어나다. -&amp;gt; 캡슐화로 내부의 내용이 바뀌더라도 사용법이 달라지지 않고, 데이터가 변경되도 다른 객체에 영향을 주지 않기 때문에
독립성이 유지된다. 연결되어 프로그램에 변경에도 외부에서 변경이 안되기 때문에, 오류의 파급이 적다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;객체 지향의 단점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;실행 속도가 느리다!
&lt;br /&gt;
최근 면접에서 당연히 알고 있는 것이라 생각했던 것이 막상 머리속에 추상적으로는 떠오르는데 단어선택이 안되고 포기해버리게 되는 자신을 발견하고 면접관님한테 너무 죄송했고,
너무 답답하였다.(내가 당사자였다면 진짜 무례하다고 생각했을 것 같다.)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="interview" />
      

      
        <summary type="html">객체지향의 정의 객체가 중심이 되며, 누가 어떤 일을 할 것인지가 핵심이다.(절차지향: 기능 중심으로 무엇을 어떤 ‘절차’로 할 것인지가 포인트) 필요한 객체들을 파악하고, 객체들의 역할을 정의하고 객체들간의 상호작용으로 프로그램을 구현하는 것을 의미한다. (객체는 실제하는 모든 것을 객체라고 할 수 있고, 그렇게 때문에 객체간의 상호작용들을 실제 각 사물들의 상호작용을 이해하는 것을 생각하면 쉬울 것 같다.)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Abstract Class vs Interface</title>
      <link href="https://sanseongko.github.io/interview2" rel="alternate" type="text/html" title="Abstract Class vs Interface" />
      <published>2021-07-21T00:00:00+09:00</published>
      <updated>2021-07-21T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/interview2</id>
      <content type="html" xml:base="https://sanseongko.github.io/interview2">&lt;h1&gt;추상클래스&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;정의&lt;/b&gt;: 클래스 구현 내부에 추상메서드가 하나이상 포함되거나, Abstract로 정의된 경우&lt;br /&gt;
공통의 자료형이라고 할 수 있는 추상클래스가 가지고 있는 공통 서비스 함수이다. 다만, 공통 서비스이지만 구현이 공통이 아닌 &lt;b&gt;서비스라고 하는 목록&lt;/b&gt;이 공통인 것을 의미&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;new 연산자를 사용해 객체를 생성할 수 없다.&lt;/li&gt;
  &lt;li&gt;추상클래스(부모)와 자식 클래스(자식)의 상속관계에 놓여있다.&lt;/li&gt;
  &lt;li&gt;새로운 일반 클래스를위한 부모 클래스의 용도로만 사용이 된다.&lt;/li&gt;
  &lt;li&gt;일반 클래스들의 필드와 메소드를 통일하여 일반 클래스의 작성시 시간 절약이 가능하다.&lt;/li&gt;
  &lt;li&gt;단일 상속만 가능하다. 일반 변수를 가질 수 없다.&lt;/li&gt;
  &lt;li&gt;동일한 클래스를 묶는 개념으로 상속받아 &lt;b&gt;기능을 향상시키는 것&lt;/b&gt;이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;인터페이스&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;정의&lt;/b&gt;: 모든 메서드가 추상 메서드인 경우이다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스는 static final 필드만 가질 수 있다. (다만 선언할 때 public *static *final이 생략된 것으로 생각함)&lt;/li&gt;
  &lt;li&gt;static final 필드만 가질 수 있는 이유는 구현 객체가 같은 동작을 보장하기 위한 목적, 인터페이스의 변수는 스스로 초기화 될 권한이 없고, 아무 *인스턴스도 존재하지 않는 시점이기 때문이다.&lt;/li&gt;
  &lt;li&gt;new 연산자를 사용해 객체를 생성할 수 없다.&lt;/li&gt;
  &lt;li&gt;다중 상속이 가능하다.&lt;/li&gt;
  &lt;li&gt;구현 객체가 같은 동작을 한다는 것을 보장하는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;공통점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;추상클래스와 인터페이스 모두 선언은 있지만, 구현은 없다는 것&lt;/li&gt;
  &lt;li&gt;인스턴스화를 할 수 없다&lt;/li&gt;
  &lt;li&gt;추상클래스를 extends한 자식들과 인터페이스를 implements하여 구현한 자식들만 객체 생성이 가능하다.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;차이점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;추상클래스&lt;/td&gt;
          &lt;td&gt;인터페이스&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;단일 상속&lt;/td&gt;
          &lt;td&gt;다중 상속&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;상속을 받아서 기능을 확장시키는 것이 목적 | 구현하는 모든 모든 클래스에 대해 특정한 메서드가 반드시 존재하도록 강제하는 역할(구현객체가 같은 동작하여야 한다)&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;*&lt;/h1&gt;
&lt;p&gt;static: 정적변수라고 하며 static이 붙으면 메모리에 딱 한번 할당되어진다.
final: 변수의 값이 더이상 변하길 원치 않는다면 붙인다.
instance: 클래스를 바탕으로 구현된 구체적인 실체(객체는 구현할 대상)이다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="interview" />
      

      
        <summary type="html">추상클래스 정의: 클래스 구현 내부에 추상메서드가 하나이상 포함되거나, Abstract로 정의된 경우 공통의 자료형이라고 할 수 있는 추상클래스가 가지고 있는 공통 서비스 함수이다. 다만, 공통 서비스이지만 구현이 공통이 아닌 서비스라고 하는 목록이 공통인 것을 의미</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">기술 면접 예상 질문</title>
      <link href="https://sanseongko.github.io/interview" rel="alternate" type="text/html" title="기술 면접 예상 질문" />
      <published>2021-06-13T00:00:00+09:00</published>
      <updated>2021-06-13T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/interview</id>
      <content type="html" xml:base="https://sanseongko.github.io/interview">&lt;p&gt;기술 면접에 관하여, 내가 지원하려고 하는 자바, 스프링, 관련 지식 또는 CS관련 지식들을 적고 대답을 적어보는 포스팅을 하려고 한다.
면접에 가서 모른다는 답변을 너무 많이했다… 아는 건데 막상 설명을 하려니 못하겠어서 찾아보고 정리하고 정확하게 말을 할 수 있을 정도가 되었으면 한다.&lt;/p&gt;

&lt;h3&gt;자바&lt;/h3&gt;
&lt;p&gt;면접 질문 중에 쓰레드에 관한 질문이 나왔고, 쓰레드를 알고 있었지 자바에서 구현 가능한지는 몰랐다. 하지만 찾아보니 써봤던 거다.&lt;/p&gt;

&lt;h3&gt;자바에서 쓰레드&lt;/h3&gt;
&lt;p&gt;내가 찾아본 자바에서 쓰레드는 보통 코드가 한번에 하나씩 실행이 된다고 한다. 그렇지만, 여기에 쓰레드를 상속받아 사용한다면, start() 메소드를 사용할 
수 있고, start()가 실행될 때 run()를 수행하게 되어 있다.&lt;/p&gt;

&lt;h3&gt;사용 이유&lt;/h3&gt;
&lt;p&gt;보통은 동시에 많은 양의 요청이 들어오는 서비스에서, 그 요청들을 하나씩 처리한다면, 많은 시간이 소요가 될 것이다. 그렇게 많은 시간이 소요되는 부분을
동시에 처리하여 시간을 줄이기 위하여 사용이 된다. 하지만 쓰레드가 많아질 경우 컴퓨터의 부하가 심해지고, [교착상태]가 날 수 있기 때문에 주의하여 
사용을 해야한다.&lt;/p&gt;

&lt;h3&gt;사용 예&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/bda05eab70c50f964b821697d6eafcf4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/built/images/interview/thread/threadcode.PNG&quot; alt=&quot;ex_screenshot&quot; /&gt;
위의 결과 처럼 원래대로라면, 생성자를 생성하고 run()이 순차적으로 실행되어야 하는데, 유저가 랜덤하게 메세지를 보내고 있는 것을 확인할 수 있다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="interview" />
      

      
        <summary type="html">기술 면접에 관하여, 내가 지원하려고 하는 자바, 스프링, 관련 지식 또는 CS관련 지식들을 적고 대답을 적어보는 포스팅을 하려고 한다. 면접에 가서 모른다는 답변을 너무 많이했다… 아는 건데 막상 설명을 하려니 못하겠어서 찾아보고 정리하고 정확하게 말을 할 수 있을 정도가 되었으면 한다.</summary>
      

      
      
    </entry>
  
</feed>
