<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://sanseongko.github.io/tag/codingtest/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://sanseongko.github.io/" rel="alternate" type="text/html" />
  <updated>2021-07-06T20:35:48+09:00</updated>
  <id>https://sanseongko.github.io/tag/codingtest/feed.xml</id>

  
  
  

  
    <title type="html">SanseongKo’s Blog | </title>
  

  
    <subtitle>온리 공부를 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">프로그래머스 코딩테스트 조이스틱(탐욕법)</title>
      <link href="https://sanseongko.github.io/codingtest-joystick" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 조이스틱(탐욕법)" />
      <published>2021-07-06T00:00:00+09:00</published>
      <updated>2021-07-06T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-joystick</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-joystick">&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습에 있는 조이스틱 문제에 대하여 풀어보았다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42860&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;br /&gt;
조이스틱의 위아래로 움직여 알파벳을 찾는 것까지는 구현을 하였다. 하지만 좌우로 움직여 최소 움직임을 찾는거에서 완전히 막혀버려 결국 답을 찾아보았다…
&lt;br /&gt;
실패코드&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//65~90  65 66 25&lt;/span&gt;
        	&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;        	
        	&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;찾아본 성공코드
&lt;script src=&quot;https://gist.github.com/sanseongKo/404c09543bd272efd6f0ee3ecc23aeaf.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;해당코드는 &lt;a href=&quot;https://hellodavid.tistory.com/4&quot;&gt;오늘의 개발&lt;/a&gt;님의 코드를 가져왔으며, 이분 뿐만아니라 다른 분들도 좌우로 움직이는 부분은 인덱스로
위치를 저장해두고 저장된 인덱스를 기준으로 Math.min() 메소드를 이용하여 최소 움직임을 찾아내는 것을 확인하였다.
&lt;br /&gt;
(i * 2) + len - nextIndex
&lt;br /&gt;
정말 이 식을 찾아내지 못한다면, 어떻게 풀어야할지 감이 안잡힌다. 해당 식은 왔던길을 다시 되돌아가는(i*2)에 모든 길이(len)를 더하고 A가 있는 부분은
모두 nextIndex로 위치를 올렸기 때문에 빼주면 되돌아온 최소움직임이 완성이 된다.
&lt;br /&gt;
하지만 문제 자체가 많이 어려운 것 같다보니, 테스트코드만 맞는 코드도 있고, 다른 테스트 코드를 적용하면 기댓값이 맞지 않는 코드도 많은 것 같다. 
&lt;br /&gt;
&lt;b&gt;알게 된 것&lt;/b&gt;
혹여라도 좌우로 움직이는 것을 찾을 때 (i * 2) + len - nextIndex 해당 식을 이용하면 좋을 것 같다. 풀다보면 반복되는 것이 있을 것이고 지금 모른다고 하더라도
다음에도 모르면 안된다는 마음가짐으로 해야겠다. (어렵다 후…)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스 코딩테스트 연습에 있는 조이스틱 문제에 대하여 풀어보았다. 문제 풀어보기 조이스틱의 위아래로 움직여 알파벳을 찾는 것까지는 구현을 하였다. 하지만 좌우로 움직여 최소 움직임을 찾는거에서 완전히 막혀버려 결국 답을 찾아보았다… 실패코드 public static int solution(String name) { int answer = 0; char[] arr = name.toCharArray(); char[] arr2 = name.toCharArray(); int tmp = 0; int tmp2 = 0; if(arr.equals(arr2))return answer; for(int i =0; i&amp;lt;arr.length;i++) {//65~90 65 66 25 arr[i] = 'A'; tmp = (int)arr2[i] - (int)arr[i]; tmp2 = 26 - tmp; if(tmp2&amp;lt;0)tmp2 = tmp2*-1; if(tmp&amp;gt;tmp2) { answer +=tmp2; }else { answer+=tmp; } } answer += min(name); return answer; } public static int min(String name) { int result = 0; return result; }</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 체육복(탐욕법)</title>
      <link href="https://sanseongko.github.io/codingtest-trainingcloth" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 체육복(탐욕법)" />
      <published>2021-07-05T00:00:00+09:00</published>
      <updated>2021-07-05T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-trainingcloth</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-trainingcloth">&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습에 있는 탐욕법 문제를 풀어보았다. 1레벨 단계의 문제이다보니 어렵지 않았지만, 탐욕법을 적용하여 풀려고하니 조금 꼬이는 
부분이 생기긴 했다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42862&quot;&gt;문제풀어보기&lt;/a&gt;
&lt;br /&gt;
밑은 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/c8724699ecf4169fe7ff18bff775638e.js&quot;&gt;&lt;/script&gt;
탐욕법 문제이니만큼 매순간 최적의 선택을 하여야 하고, 처음 내가 문제를 풀었을 땐, flag기법으로 각 배열의 위치로 boolean 배열을 만들어 사용하였지만, 
그렇게 되면, 가능은 하겠지만, 여벌의 옷이 있지만 받지 못하는 경우를 처리하기에 힘들어서 정수배열로 만들어 처리하였다. 만약 1,3이 lost에 들어잇고, 2,4가 
reserve에 들어잇고 n이 5명 이상일 때, 처음 코드에서는 3번이 4번의 옷을 가져가게되면 2번이 옆의 옷이 없다는 것으로 가정하여 옷을 받지 못하는 경우가 생긴다.
이럴 경우를 위하여 위의 코드로 처리하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;오늘 배운 것&lt;/b&gt;
탐욕법은 매 순간 최선의 선택을 하여야하고 다른 것은 절대 신경쓰면 안된다. 그렇기 때문에, 최선의 선택이 전체적으로 봤을 때 올바른 선택이 되어야 한다.
문제를 풀 때 매순간이 최선의 선택인지 확인하고 혹시 빠진 것이 없는지를 주의하며 문제를 풀어나가야하겠다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스 코딩테스트 연습에 있는 탐욕법 문제를 풀어보았다. 1레벨 단계의 문제이다보니 어렵지 않았지만, 탐욕법을 적용하여 풀려고하니 조금 꼬이는 부분이 생기긴 했다. 문제풀어보기 밑은 정답 코드이다. 탐욕법 문제이니만큼 매순간 최적의 선택을 하여야 하고, 처음 내가 문제를 풀었을 땐, flag기법으로 각 배열의 위치로 boolean 배열을 만들어 사용하였지만, 그렇게 되면, 가능은 하겠지만, 여벌의 옷이 있지만 받지 못하는 경우를 처리하기에 힘들어서 정수배열로 만들어 처리하였다. 만약 1,3이 lost에 들어잇고, 2,4가 reserve에 들어잇고 n이 5명 이상일 때, 처음 코드에서는 3번이 4번의 옷을 가져가게되면 2번이 옆의 옷이 없다는 것으로 가정하여 옷을 받지 못하는 경우가 생긴다. 이럴 경우를 위하여 위의 코드로 처리하였다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 소수 카페트(완전탐색)</title>
      <link href="https://sanseongko.github.io/codingtest-carpet" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 소수 카페트(완전탐색)" />
      <published>2021-07-04T00:00:00+09:00</published>
      <updated>2021-07-04T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-carpet</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-carpet">&lt;p&gt;오늘은 프로그래머스 코딩테스트연습에 마지막 완전탐색 문제 카페트에서 대하여 풀어보았다. 갈색과 노란색의 합으로 나올 수 있는 사각형의 가로와 세로를
모두 구하고, 구한 것을 바탕으로 (가로-2)*(세로-2)가 노란색이 되는 것을 이용하였다.
&lt;br /&gt;
밑은 코드이고, &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42842&quot;&gt;풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/dc17d5db4ece03aa6ce62203c7802912.js&quot;&gt;&lt;/script&gt;
사실 다른 코드는 쉽지만 노란색을 구하지 못한다면, 가로와 세로는 구할 수 있겠지만, 갈색의 개수와 노란색의 개수가 다를 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
요즘 코딩테스트 문제를 풀면서 생각하는 것이지만, 알고리즘이 문제가 아니다… 규칙찾아내는 것이 더힘들다…&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스 코딩테스트연습에 마지막 완전탐색 문제 카페트에서 대하여 풀어보았다. 갈색과 노란색의 합으로 나올 수 있는 사각형의 가로와 세로를 모두 구하고, 구한 것을 바탕으로 (가로-2)*(세로-2)가 노란색이 되는 것을 이용하였다. 밑은 코드이고, 풀어보기 사실 다른 코드는 쉽지만 노란색을 구하지 못한다면, 가로와 세로는 구할 수 있겠지만, 갈색의 개수와 노란색의 개수가 다를 수 있다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 소수 찾기(완전탐색)</title>
      <link href="https://sanseongko.github.io/codingtest-findPrimenuber" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 소수 찾기(완전탐색)" />
      <published>2021-07-03T00:00:00+09:00</published>
      <updated>2021-07-03T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-findPrimenuber</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-findPrimenuber">&lt;p&gt;오늘은 프로그래머스 완전탐색에 있는 소수찾는 문제를 풀어보았다. 실제로는 풀지 못하였고, 소수를 찾기 위하여 제곱근을 사용하는 방법까지는 알고 있었지만,
재귀함수를 통하여 나올 수 있는 모든 수를 탐색하는 것이 아직 너무 익숙치 않았다.(재귀함수 ㅂㄷㅂㄷ…)
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42839&quot;&gt;풀어보기&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sanseongKo/4c3c7996a5d97e473087a67fd529f2bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://hidelookit.tistory.com/67&quot;&gt;숨어보는 IT&lt;/a&gt;님의 코드를 참고하여 만들었고, 중요한 부분은 소수를 찾는 부분보다 들어온 문자열을 가지고
나올 수 있는 모든 수를 찾는 것이 더 중요한 것 같다. 해당 코드에서는 boolean값으로 처음 cycle메소드를 호출하였을 때 해당하는 수를 true로 바꿔주고 
true라면 다시 쓰이지 않도록 하였다. 또한 마지막에 다시 false로 바꿔주며 start가 증가할 때 처음부터 확인하기 위하여 설정이 되어 있다. end는 호출하는 곳의
i값을 써서 1자리수 2자리수 3자리수로 나올 수 있는 값들을 알아내기 위한 것이다. 
&lt;br /&gt;
재귀함수를 이용하여 알고리즘 문제를 푸는 것이 아직 익숙치 않고, 이렇게하면 되지 않을까하는 생각은 들지만 머리로 순간적으로 그려지지 않다보니 많은 어려움을
겪는 것 같다. 많은 시간 투자와 노력이 필요하지 않을까 싶다. 완전탐색 또는 BFS DFS에 재귀함수를 조금 적극적으로 써볼 필요성이 느껴진다. 그리고 조합을 풀 때
boolean값으로 방문한 값을 확인하는 것을 많이 쓰기 때문에, 알아두고 두고두고 사용하여야할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;알게 된 것&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Math.sqrt() : 숫자의 제곱근을 구해주는 메소드이다.&lt;/li&gt;
  &lt;li&gt;flag를 이용한 완전탐색: false와 true로 각 자리의 숫자가 쓰인적이 있는지 확인하는 기법이 많이 사용되는 것 같다. 익숙해지자.&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스 완전탐색에 있는 소수찾는 문제를 풀어보았다. 실제로는 풀지 못하였고, 소수를 찾기 위하여 제곱근을 사용하는 방법까지는 알고 있었지만, 재귀함수를 통하여 나올 수 있는 모든 수를 탐색하는 것이 아직 너무 익숙치 않았다.(재귀함수 ㅂㄷㅂㄷ…) 풀어보기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 H Index(정렬)</title>
      <link href="https://sanseongko.github.io/codingtest-hindex" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 H Index(정렬)" />
      <published>2021-07-02T00:00:00+09:00</published>
      <updated>2021-07-02T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-hindex</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-hindex">&lt;p&gt;오늘은 정렬문제의 마지막 H Index 문제에 대하여 풀어보았다. 솔직히 처음 문제가 이해가 되었다 안 되었다를 반복하며 혼란을 주었고, 풀이와 설명을 들었을 때에도
긴가민가하게 되었고, 코드를 짜면서 이해가 되었다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sanseongKo/8046b9e195eb14e2a70316354fd58043.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;정답 코드이며, 문제는 h를 처음 배열의 길이만큼 주고(h는 배열의 길이를 넘어갈 수 없다.) 배열을 정렬한다. 그럼 for문안에서 h를 계속 감소시켜 문제를 풀었다.&lt;br /&gt;
같이 공부하는 친구에게 설명을 듣고, h가 감소할 때 결국 그 값 보다 큰 값들이 h보다 같거나 많은 경우에 정답이 될 수 있었고, h가 밑에서 부터 올라온다면,
처음 수가 작을 경우 그 값을 리턴할 경우가 있기 때문에(이경우엔 h보다 작거나 같은 것을 구하면 될 것) 감소시켰다. 결국 감소되며 if문을 검사 받을 때 크거나 같다면
h-1번째 이후는 모드 그 값보다 크기 때문에 답이 될 수 있다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 정렬문제의 마지막 H Index 문제에 대하여 풀어보았다. 솔직히 처음 문제가 이해가 되었다 안 되었다를 반복하며 혼란을 주었고, 풀이와 설명을 들었을 때에도 긴가민가하게 되었고, 코드를 짜면서 이해가 되었다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 모의고사(완전탐색)</title>
      <link href="https://sanseongko.github.io/codingtest-moctest" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 모의고사(완전탐색)" />
      <published>2021-07-02T00:00:00+09:00</published>
      <updated>2021-07-02T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-moctest</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-moctest">&lt;p&gt;이어서, 완전탐색의 첫번째 문제인 모의고사를 풀게되었다. 밑에는 정답코드이고 1단계이다보니, 문제가 쉬운 편이였다.&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42840&quot;&gt;문제풀어보기&lt;/a&gt;
밑에는 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/7876d20455724eccc29f8ededbc9d309.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;이 문제에서 제일 중요한 것은 사실 각 수포자들의 값을 answers의 배열길이만큼 반복시키는 것이고 이 부분을 나머지를 구하는 것으로 해결하였고, 다음은
Math.max()안에 다른 max메소드를 사용하여 3개의 값을 동시에 비교하는 것이다. 이렇게하여 모든 값들을 확인하여 최대값을 구하고 같은 값을 걸러내는 코드를
작성하면 되었다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">이어서, 완전탐색의 첫번째 문제인 모의고사를 풀게되었다. 밑에는 정답코드이고 1단계이다보니, 문제가 쉬운 편이였다.문제풀어보기 밑에는 정답 코드이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 가장 큰 수 (정렬)</title>
      <link href="https://sanseongko.github.io/codingtest-mostlargenumber" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 가장 큰 수 (정렬)" />
      <published>2021-07-01T00:00:00+09:00</published>
      <updated>2021-07-01T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-mostlargenumber</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-mostlargenumber">&lt;p&gt;오늘은 프로그래머스의 가장 큰 수 문제를 풀어 보았다. 처음 생각했을 때 문자열로 바꾸어 모든 경우의 수를 구하여 배열에 담는 생각을 하였는데, 그럴 경우
코드가 너무 복잡하였고, 문제 의도와 완전히 다른 것 같아 포기하였다. 이후, 제일 큰수가 만들어 질 때 큰 수 대로 나열하여 만드는 로직을 생각하였지만, 
정렬과는 거리가 멀었다.(예: [6, 70, 7,47]이 들어왔다면, 처음 제일 큰 건 7이고 이후 70이 나오는게 제일 크다, 그리고 6이 나오고 47이 나오는 각 자리의
앞자리가 큰 거부터 나열하고 수가 같은 것이 있다면, 1자리수가 있는지 확인 있다면 두자리 수가 1자리 수보다 크다면 ex. 5와 50~55는 5가먼저, 56~59는
두자리수가 우선순위)
&lt;br /&gt;
아무튼 복잡하다… 빠르게 포기하고 답을 보았는데, comparator클래스의 compare를 오버라이딩하여 문제를 푸는 것이 빠른 것을 확인, 다만 compare오버라이딩이
익숙치 않아 이해하는데 시간이 좀 걸렸다. 
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42746&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/e3e5f0a09da5026e39619f0d9465c35c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;완성된 코드이고, 코드는 유튜브&lt;a href=&quot;https://www.youtube.com/watch?v=SQD-WN0FxM4&amp;amp;t=350s&quot;&gt;CodingTest_User&lt;/a&gt;님의 유튜브를 참고하여 작성하였다. 
유튜브안에서 compare 오버라이딩도 알려주셔서 알 수 있었고, o1과 o2의 더함(문자열이기 때문에 문자열로 붙게되어 두수를 합친 경우의 수가되는 것으로 이해 됨)
을 비교하여 자리를 바꿔주는 것이다.(리턴 1이면 자리 변경 0이면 같은수 -1이면 그대로)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
해당 문제로 알게된 것
&lt;br /&gt;
&lt;b&gt;valueOf&lt;/b&gt;
&lt;br /&gt;
여기서 쓰인 valueOf는 인트형을 스트링형으로 변환하여 저장한다는 의미를 가지고 있었다.
&lt;br /&gt;
&lt;b&gt;Compare 클래스의 compare오버라이딩&lt;/b&gt;
&lt;br /&gt;
정렬할 때 compare을 오버라이딩하여 나의 입맛에 맞게 변화시켜줄 수 있었고, 람다식으로 표현한다면,&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 표현 가능하다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스의 가장 큰 수 문제를 풀어 보았다. 처음 생각했을 때 문자열로 바꾸어 모든 경우의 수를 구하여 배열에 담는 생각을 하였는데, 그럴 경우 코드가 너무 복잡하였고, 문제 의도와 완전히 다른 것 같아 포기하였다. 이후, 제일 큰수가 만들어 질 때 큰 수 대로 나열하여 만드는 로직을 생각하였지만, 정렬과는 거리가 멀었다.(예: [6, 70, 7,47]이 들어왔다면, 처음 제일 큰 건 7이고 이후 70이 나오는게 제일 크다, 그리고 6이 나오고 47이 나오는 각 자리의 앞자리가 큰 거부터 나열하고 수가 같은 것이 있다면, 1자리수가 있는지 확인 있다면 두자리 수가 1자리 수보다 크다면 ex. 5와 50~55는 5가먼저, 56~59는 두자리수가 우선순위) 아무튼 복잡하다… 빠르게 포기하고 답을 보았는데, comparator클래스의 compare를 오버라이딩하여 문제를 푸는 것이 빠른 것을 확인, 다만 compare오버라이딩이 익숙치 않아 이해하는데 시간이 좀 걸렸다. 문제 풀어보기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 K번째 수(정렬)</title>
      <link href="https://sanseongko.github.io/codingtest-numberK" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 K번째 수(정렬)" />
      <published>2021-07-01T00:00:00+09:00</published>
      <updated>2021-07-01T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-numberK</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-numberK">&lt;p&gt;이어서, 프로그래머스 코딩테스트 연습의 K번째 수 문제를 풀어보았다. 1단계 문제이니만큼 어렵지 않게 풀어낼 수 있었다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42748&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/b39d1045ea0adb9a1784fd3805f6f928.js&quot;&gt;&lt;/script&gt;
해당 코드이고, 들어간 수를 그냥 우선순위 큐에 넣어 정렬시켰다. 그리고 r-1에서 걸리면 해당 que의 맨 처음 노드를 tmp배열에 넣어주었고, 리턴된 값을 answer에 담아 주었다.
또한, tmp의 길이는 무조건 commands 이차원 배열의 길이이기 때문에, 처음부터 설정하여 풀어주었다.
&lt;br /&gt;
밑에는 다른 사람의 풀의의 맨 처음있는 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copyOfRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;알게된 것
&lt;br /&gt;
&lt;b&gt;copyOfRange&lt;/b&gt;
Arrays클래스의 해당 메소드는 (배열, 시작지점, 엔드지점) 복사하고자하는 배열을 넣고 어디서부터 복사를 할 것인지 시작지점을 정하고 끝지점을 구하면되는 것 같다.
느낌 상으로, String의 substring()과 느낌이 많이 비슷하다. 저렇게 풀면, 코드가 줄고 for문을 하나만 사용하여 할 수 있어서 더 효율적인 것 같다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">이어서, 프로그래머스 코딩테스트 연습의 K번째 수 문제를 풀어보았다. 1단계 문제이니만큼 어렵지 않게 풀어낼 수 있었다. 문제 풀어보기 해당 코드이고, 들어간 수를 그냥 우선순위 큐에 넣어 정렬시켰다. 그리고 r-1에서 걸리면 해당 que의 맨 처음 노드를 tmp배열에 넣어주었고, 리턴된 값을 answer에 담아 주었다. 또한, tmp의 길이는 무조건 commands 이차원 배열의 길이이기 때문에, 처음부터 설정하여 풀어주었다. 밑에는 다른 사람의 풀의의 맨 처음있는 코드이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 다리를 지나는 트럭(스택/큐) 문제</title>
      <link href="https://sanseongko.github.io/codingtest-truck" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 다리를 지나는 트럭(스택/큐) 문제" />
      <published>2021-06-27T00:00:00+09:00</published>
      <updated>2021-06-27T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-truck</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-truck">&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습의 다리를 지나는 트럭 문제를 풀어보았다. 
처음에 나는 길이와 트럭의 길이가 문제에 주어져 있지 않아서 트럭의 무게 = 트럭의 길이인줄 알았다. 
그래서 헤메다가 다시 문제를 읽어보니 트럭길이가 1이지 않을까 하는 생각이 들어서 대입하여 풀어보았고, 이게 맞긴했다.
처음 내가 풀었던 코드이다.(실패한 코드)
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42583&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/85a7aeee22a684544a75e14eefd45774.js&quot;&gt;&lt;/script&gt;
실패한 이유는 다리에 올라가 있는 트럭의 무게가 다리가 견딜수 있는 하중보다 작으면 된다라는 점은 동일했다. 하지만, 문제가 되는 부분은 만약 2대의 트럭이 
다리에 올라가 있다고 하고, 다리가 견딜수 있는 하중보다 2대가 같거나 적었을 경우인데, 이중에 한대가 빠져나갔다고하고 다음 들어오는 트럭과 남아있는 한대의
트럭이 합이 하중보다 작을 경우 한대는 끝에 다다르고 한대는 시작점에 있는데 이부분에서 걸리는 시간이 차이가 나는 것이다.&lt;br /&gt;
이 부분을 어떻게 맞춰줘야 할까하여, 결국 구글에 해당 답을 찾아보게 되었고, 문제는 간단했다. 큐에 트럭을 담는 것과 무게를 비교해주는 것은 동일했다.
하지만 큐에 트럭만 담아주는 것이 아닌, 다른 수를 넣어(보통 0을 넣으셨다) que.size()를 다리 길이와 맞춰주고 쉽게 한칸씩 앞으로 간다면, 초를 증가시켜
주면 되는 것이었다.&lt;br /&gt;
밑에는 아이디어를 받고 다시 작성한 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/8246337b3918b309a79de837a4b12482.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;큐를 길이로도 쓸 수 있다!(담고 빼는거만 생각하지말자)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">오늘은 프로그래머스 코딩테스트 연습의 다리를 지나는 트럭 문제를 풀어보았다. 처음에 나는 길이와 트럭의 길이가 문제에 주어져 있지 않아서 트럭의 무게 = 트럭의 길이인줄 알았다. 그래서 헤메다가 다시 문제를 읽어보니 트럭길이가 1이지 않을까 하는 생각이 들어서 대입하여 풀어보았고, 이게 맞긴했다. 처음 내가 풀었던 코드이다.(실패한 코드) 문제 풀어보기 실패한 이유는 다리에 올라가 있는 트럭의 무게가 다리가 견딜수 있는 하중보다 작으면 된다라는 점은 동일했다. 하지만, 문제가 되는 부분은 만약 2대의 트럭이 다리에 올라가 있다고 하고, 다리가 견딜수 있는 하중보다 2대가 같거나 적었을 경우인데, 이중에 한대가 빠져나갔다고하고 다음 들어오는 트럭과 남아있는 한대의 트럭이 합이 하중보다 작을 경우 한대는 끝에 다다르고 한대는 시작점에 있는데 이부분에서 걸리는 시간이 차이가 나는 것이다. 이 부분을 어떻게 맞춰줘야 할까하여, 결국 구글에 해당 답을 찾아보게 되었고, 문제는 간단했다. 큐에 트럭을 담는 것과 무게를 비교해주는 것은 동일했다. 하지만 큐에 트럭만 담아주는 것이 아닌, 다른 수를 넣어(보통 0을 넣으셨다) que.size()를 다리 길이와 맞춰주고 쉽게 한칸씩 앞으로 간다면, 초를 증가시켜 주면 되는 것이었다. 밑에는 아이디어를 받고 다시 작성한 정답 코드이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">프로그래머스 코딩테스트 연습 주식가격(스택/큐) 문제</title>
      <link href="https://sanseongko.github.io/codingtest-stockprice" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 주식가격(스택/큐) 문제" />
      <published>2021-06-27T00:00:00+09:00</published>
      <updated>2021-06-27T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/codingtest-stockprice</id>
      <content type="html" xml:base="https://sanseongko.github.io/codingtest-stockprice">&lt;p&gt;다리를 지나가는 트럭 이후에 프로그래머스 스택/큐의 마지막 문제 주식가격의 문제를 풀었다. 한번에 통과되었고, 스택/큐 문제였지만, 안쓰는게 더 나아보여서
그냥 배열로 풀었다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42584&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/53d9712294d940d6cd76e9e470cbae2b.js&quot;&gt;&lt;/script&gt;
성공한 코드이고, 효율성도 만족하였다.
그나마 쉬운 문제였다고 생각이 들고 마지막 0을 맞추는 것과, 중간에 time이 0으로 초기화되었는데 수정하였다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="codingtest" />
      

      
        <summary type="html">다리를 지나가는 트럭 이후에 프로그래머스 스택/큐의 마지막 문제 주식가격의 문제를 풀었다. 한번에 통과되었고, 스택/큐 문제였지만, 안쓰는게 더 나아보여서 그냥 배열로 풀었다. 문제 풀어보기 성공한 코드이고, 효율성도 만족하였다. 그나마 쉬운 문제였다고 생각이 들고 마지막 0을 맞추는 것과, 중간에 time이 0으로 초기화되었는데 수정하였다.</summary>
      

      
      
    </entry>
  
</feed>
