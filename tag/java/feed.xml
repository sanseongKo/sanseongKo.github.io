<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://sanseongko.github.io/tag/java/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://sanseongko.github.io/" rel="alternate" type="text/html" />
  <updated>2021-06-16T19:29:10+09:00</updated>
  <id>https://sanseongko.github.io/tag/java/feed.xml</id>

  
  
  

  
    <title type="html">SanseongKo’s Blog | </title>
  

  
    <subtitle>온리 공부를 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Java REST API 실습</title>
      <link href="https://sanseongko.github.io/java-restapipractice" rel="alternate" type="text/html" title="Java REST API 실습" />
      <published>2021-06-10T00:00:00+09:00</published>
      <updated>2021-06-10T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/java-restapipractice</id>
      <content type="html" xml:base="https://sanseongko.github.io/java-restapipractice">&lt;p&gt;REST API를 너무 해보고 싶어 하나 하나 전부 뜯어 보려한다. 강의를 사서 볼까도 했지만, 오기가 생겨서 다 찾아보고 적어보려고 한다. 스프링 부트의 
어노테이션에 관한 것도 같이 올릴 것이다. 또한 하루만에 완성하는 포스팅이 아니기 때문에, 수정날짜를 밑에 적도록 하겠다.&lt;/p&gt;

&lt;b3&gt;@Data&lt;/b3&gt;
&lt;p&gt;&lt;br /&gt;
Data어노테션의 경우 getter setter tostring hashcode equals전부 만들어주는 어노테이션으로 lombok 라이브러리에서 사용이 가능하며, 
@Getter, @Setter, @ToString, @EqualsAndHashCode 로 나누어 사용도 가능하며, get, set, toString, eqauls, hashcode 원하는 메서드를
사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;@NoArgsConstructor&lt;/b&gt;
&lt;br /&gt;
파라미터가 없는 생성자를 만들어주는 어노테이션이다.
&lt;b&gt;@AllArgsConstructor&lt;/b&gt;
&lt;br /&gt;
모든 파라미터로, 모든 필드에 대한 생성자를 만들어주는 어노테이션이다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;@Entity&lt;/b&gt;
&lt;br /&gt;
@Entity는 DB의 테이블과 일대일로 매칭되는 객체의 단위이며, 기본 생성자가 필요하고, 필드에 final interface class를 사용할 수 없다. 또한 name
을 주면 엔티티의 이름을 지정하고 @Entity가 붙은 클래스는 JPA에서 관리하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;@Table(name = “”)&lt;/b&gt;
&lt;br /&gt;
@Table없이 테이블을 생성하게 될 경우 Entity 클래스의 카멜표기법을 유지한 상태로 테이블이 생성되기 때문에 작성해주는 것이 관례이다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;@Id&lt;/b&gt;
&lt;br /&gt;
@Id어노테이션을 인스턴스에 붙이게 될 경우, PK와 같은 의미가 된다. 또한 @GerneratedValue를 사용할 경우 해당 변수의 수가 자동으로 증가하게 된다.
(sequence와 같은 의미.)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Spring Data JPA 쿼리 메소드안에 지원되는 키워드&lt;/b&gt;
findBy 이런 형태가 쿼리 메소드 구문 이러면 자동으로 sql구문을 만들어 준다. 지원되는 키워드는 &lt;a href=&quot;https://happygrammer.tistory.com/158&quot;&gt;happygrammer&lt;/a&gt;님의
블로그에 정리가 되어있어 링크해두겠다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OrElseThrow 메소드&lt;/b&gt;
&lt;br /&gt;
해당 메소드의 경우 java.util.Optiona을 임포트하여 사용이 가능하고, 실습 중에서는
Optional&lt;Emp&gt; org.springframework.data.repository.CrudRepository.findById(Integer id)메서드를 사용할 때 사용이 가능했다. 
따로 에러처리를 해주지 않고, 에러가 날 경우 에러처리를 위한 클래스로 보내지는 메소드이다.&lt;/Emp&gt;&lt;/p&gt;

&lt;p&gt;추가적인 부분은 현재 The type org.springframework.util.MultiValueMap cannot be resolved. It is indirectly referenced from required .class files
에러가 나서 이후에 올려보겠다.
&lt;b&gt;2021-06-11&lt;/b&gt;
&lt;br /&gt;
어제의 에러는 spring-core자르 파일이 문제가 있어 발생하여 외부에서 파일을 가져와 라이브러리를 추가하니 해결이 되었다.를 하자마자 새로운 오류 
Consider defining a bean named ‘entityManagerFactory’ in your configuration. 발생, 해결하고 돌아와야지…
이 부분은 톰캣 버전을 9로 맞춰주고 .m2폴더에 hibernate폴더를 지우고 다시 빌드하여 문제를 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2021-06-12&lt;/b&gt;
&lt;br /&gt;
정의해 두었던 메소드를 사용하여 데이터를 삽입 실행시에 테이블을 생성하게 하여 실행하였을 때 데이터가 삽입되고, 테이블이 만들어지는 것을 확인,HeildiSql에
데이터가 담기고 브라우저에 해당 데이터들이 제이슨형태로 보여지는 것까지 확인하였다. 예전 legacy로 한 프로젝트 안에서 모든걸 처리할 때, 컨트롤러의 리턴
값을 JSP로 보내주었었는데, 이것을 레스트 API에선 리턴 값을 상태코드와 같이 보내주는 것을 보고, 머리속으로 그려지던게 조금 더 가까이 느껴졌다. 이제
초석은 다졌으니 레스트 API의 제약 조건을 조금 더 알아보고 추가해보고 기존에 만들었던 프로젝트를 API화 시켜 REST방식으로 통신하는 것까지 진행해 보겠다.
이 연습은 여기서 끝~&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2021-06-13&lt;/b&gt;
&lt;b&gt;Hateoas&lt;/b&gt;
&lt;br /&gt;
Rest Api의 제약 조건중 Hateoas의 제약 조건이 제일 맞추기 어려운 것을 보았다. Hypermedia As The Engine Of Application State의 약자이다.
Hateoas는 링크를 통하여 어플리케이션의 상태가 전이되어야 하고, 링크에 자신의 정보가 담겨야 한다는 것이다. 이 말의 뜻은, 링크의 URI자원이 명시되어 있어야 
하며, 클라이언트가 서버와 동적으로 상호작용이 가능하다는 말이다. 클라이언트가 서버에 POST요청을 보냈다고 가정했을 때, 이에 의존되는 GET, PUT, DELETE등의 
URI를 Reponse에 포함하여 반환 시킨다. 
응답 예:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;게시글 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;HAL JSON을 이용한 예시 JSON&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/api/article/1000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 현재 api 주소&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/docs#query-article&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 해당 api의 문서&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/api/article/1001&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다음 article을 조회하는 URI&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/api/article/comment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// article의 댓글 달기&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/api/feed/article/1000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// article을 내 피드로 저장&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 부분은 지켜지지 않고 있는 API들이 많으며, 스프링의 라이브러리를 사용하여 조금 더 쉽게 접근할 수 있기 때문에 다음엔, 라이브러리에서 제공하는 것을,
사용하여 적용시켜 보겠다.&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;https://www.youtube.com/watch?v=Xb0OEOiZ3Rg&quot;&gt;오라클 자바 커뮤니티&lt;/a&gt;
&lt;a href=&quot;https://wonit.tistory.com/454&quot;&gt;Wonit&lt;/a&gt;
깃허브: &lt;a href=&quot;https://github.com/sanseongKo/restapipractice&quot;&gt;sanseongKo&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">REST API를 너무 해보고 싶어 하나 하나 전부 뜯어 보려한다. 강의를 사서 볼까도 했지만, 오기가 생겨서 다 찾아보고 적어보려고 한다. 스프링 부트의 어노테이션에 관한 것도 같이 올릴 것이다. 또한 하루만에 완성하는 포스팅이 아니기 때문에, 수정날짜를 밑에 적도록 하겠다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Java RESTful API 개념 정리</title>
      <link href="https://sanseongko.github.io/java-restapi" rel="alternate" type="text/html" title="Java RESTful API 개념 정리" />
      <published>2021-05-30T00:00:00+09:00</published>
      <updated>2021-05-30T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/java-restapi</id>
      <content type="html" xml:base="https://sanseongko.github.io/java-restapi">&lt;p&gt;오늘은 RESTful API에 대하여 정리해보려고 한다.
RESTful API를 알기전에 REST와 RESTful의 차이를 알아야 한다.
REST란, 분산시스템 설계를 위한 &lt;b&gt;아키텍처 스타일&lt;/b&gt;이다. 즉, 제약 조건의 집합이라고 볼 수 있다. 
그렇다면, RESTful은 무엇일까? RESTful은 제약조건의 집합 즉, 아키텍처 스타일, 아키텍처 원칙을 모두 만족하는 것을 의미한다.&lt;/p&gt;

&lt;h3&gt;RESTful API&lt;/h3&gt;
&lt;p&gt;RESTful API는 REST 아키텍처 원칙을 모두 만족하는 API라고 할 수 있다.
또한, 인터넷과 웹을 통해 나의 컴퓨터를 제어할때 어떻게하면 시행착오를 줄이고 더 좋은 API를 만들수 있는가에 대한 고민이다.
RESTful API는 특정기술 지칭하는 것이 아니라, HTTP를 이용하여 기계들이 통신할때 HTTP가 가진 잠재력을 최대한 끌어낼 수 있는 모범사례라고 할 
수 있다. 
HTTP메서드들을 본래 용도에 맞게 쓰자는 것도 중요한 목적&lt;/p&gt;

&lt;h3&gt;RESTful API의 구성요소&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Resource(자원)&lt;/b&gt;
데이터들을 Resource라고 하고, REST API는 URI(정보를 식별하는 이름일뿐) 로 표현된다.
Collection : Element 의 집합(복수형)
Element: 콜렉션에서 하나하나의 데이터(단수형)
URI를 가공하는 방법&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Method(행위)&lt;/b&gt;
또한, 보통의 웹페이지간의 데이터 전송은 Post로 이루어지는 경우가 많다. REST는 HTTP메소드를 최대한 활용하는 아키텍처 스타일이다.
그렇기 때문에, REST는 HTTP메소드를 알맞은 곳에 사용하기를 원한다. 밑의 내용은 HTTP메소드의 원래의 기능을 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Create -&amp;gt; post&lt;br /&gt;
Read -&amp;gt; get&lt;br /&gt;
Update -&amp;gt; put(전체), patch(부분)&lt;br /&gt;
Delete -&amp;gt; delete&lt;br /&gt;&lt;b&gt;
&lt;a href=&quot;https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md&quot;&gt;Microsoft REST API Guidelines&lt;/a&gt;에서는 HEAD와 OPTIONS메소드도 알려주고 있다.
HEAD는 READ(GET) 응답을 위해 객체의 메타데이터를 리턴해주는 것이며, OPTION은 요청 정보를 얻는 것 즉, 도움말 정도로 볼 수 있을 것 같다. 
여기서 put과 patch의 방식이 조금 혼동될 수 있지만, patch는 다른 데이터에 영향을 주지 않고 해당 데이터만 변한다면, put은 변경하려는 데이터를
제외하고는 삭제가 되는 차이를 예로 들 수 있다.(patch는 부분을 수정, put은 전체 수정)&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;REST 특징(제약 조건)&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Server-Client(서버-클라이언트 구조)&lt;/b&gt;
    REST서버는 API를 제공, Client는 사용자 인증이나 세션,로그인 정보등을 직접 관리하는 구조로 서버와 클라이언트 사이의 역할이 확실히 구분됨
    그로인하여, 개발할 내용이 명확해지고 서로간 의존성이 줄어들게 된다.
&lt;b&gt;Stateless(무상태성)&lt;/b&gt;
작업을 위한 상태정보를 따로 저장하거나 관리하지 않는다. 따라서 들어오는 요청을 단순히 처리만 하면된다. 이로인하여 서비스의 자유도가 상승 서버의
불필요한 정보를 관리하지 않기 때문에 구현이 단순해진다.
&lt;br /&gt;
&lt;b&gt;Cacheable(캐시 처리 가능)&lt;/b&gt;
HTTP의 기존 웹표준을 그대로 이용하기 때문에, 웹에서 사용하는 기존 인프라를 그대로 활용이 가능하다. 따라서 HTTP의 캐싱기능을 적용할 수 있는 것이
다. (캐싱구현은 HTTP표준에서 사용하는 Last-Modified태그나 E-Tag를 이용하면 캐싱 구현이 가능하다.)
&lt;br /&gt;
&lt;b&gt;Layered System(계층형 구조)&lt;/b&gt;
REST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워
크 기반의 중간매체를 사용할 수 있게한다.
&lt;br /&gt;
&lt;b&gt;Uniform Interface(인터페이스 일관성)&lt;b&gt;
Uniform Interface는 URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일을 말한다.
&lt;br /&gt;
&lt;b&gt;Self-descriptiveness&lt;/b&gt;
REST API의 메세지만 보고도 이를 쉽게 이해할 수 있는 자체 표현 구조로 되어 있다.
&lt;br /&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;추가적인 내용은=&quot;&quot; 더욱=&quot;&quot; 이후=&quot;&quot; REST=&quot;&quot; API를=&quot;&quot; 만들다가=&quot;&quot; 보충될게=&quot;&quot; 있으면=&quot;&quot; 더=&quot;&quot; 보충=&quot;&quot;&gt;



출처
[정아마추어 코딩블로그](https://jeong-pro.tistory.com/180#:~:text=REST%EB%8A%94%20%EB%B6%84%EC%82%B0%20%EC%8B%9C%EC%8A%A4%ED%85%9C%20%EC%84%A4%EA%B3%84,%EB%A7%8C%EC%A1%B1%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%84%20%EC%9D%98%EB%AF%B8%ED%95%9C%EB%8B%A4.)
https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html/rest-and-restful.html
https://meetup.toast.com/posts/92
[생활코딩님의 기계들의 대화법 - REST API](https://www.youtube.com/watch?v=PmY3dWcCxXI)
&lt;/추가적인&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">오늘은 RESTful API에 대하여 정리해보려고 한다. RESTful API를 알기전에 REST와 RESTful의 차이를 알아야 한다. REST란, 분산시스템 설계를 위한 아키텍처 스타일이다. 즉, 제약 조건의 집합이라고 볼 수 있다. 그렇다면, RESTful은 무엇일까? RESTful은 제약조건의 집합 즉, 아키텍처 스타일, 아키텍처 원칙을 모두 만족하는 것을 의미한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Java JPA란?</title>
      <link href="https://sanseongko.github.io/java-jpa" rel="alternate" type="text/html" title="Java JPA란?" />
      <published>2021-05-27T00:00:00+09:00</published>
      <updated>2021-05-27T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/java-jpa</id>
      <content type="html" xml:base="https://sanseongko.github.io/java-jpa"></content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Java ORM이란?</title>
      <link href="https://sanseongko.github.io/java-orm" rel="alternate" type="text/html" title="Java ORM이란?" />
      <published>2021-05-27T00:00:00+09:00</published>
      <updated>2021-05-27T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/java-orm</id>
      <content type="html" xml:base="https://sanseongko.github.io/java-orm">&lt;p&gt;MyBatis를 사용하다가 ORM이라는 것을 듣게 되었다. 너무 궁금하니 한번 알아보자.&lt;/p&gt;

&lt;h3&gt;ORM이란?&lt;/h3&gt;
&lt;p&gt;Object Relational Mapping, 말 그대로 객체-관계 매핑이라는 것이다.
다만 RDB는 테이블로 이루어져 있고, OPP 객체지향 프로그래밍에서는 클래스를 사용하게 된다. 하지만 객체와 관계형 데이터베이스가 애초에 호환을 염두
하고 만들어 진 것이 아니다보니, 자연스럽게 불일치가 발생하게 된다. 
이럴때 ORM을 사용하여 객체의 관계를 바탕으로 SQL문을 자동적으로 생성 불일치를 해결한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;객체 - 관계 간의 불일치&lt;b&gt;
그렇다면 객체-관계간의 불일치는 왜 생기게 될까? 이유는 5가지로 분류할 수 있다.
&lt;b&gt;1. 세분성(Granularity)&lt;/b&gt;
경우에 따라서 데이터베이스에 있는 테이블 수보다 &lt;b&gt;더 많은 클래스&lt;/b&gt;를 가진 모델이 생길 수 있다.
(RDB 데이터 타입은 Vendor마다 다르며, 더이상 정규화가 힘들다.)&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. 상속성(Inheritance)&lt;/b&gt;
RDBMS는 객체지향 프로그래밍 언어의 특징인 &lt;b&gt;상속 개념이 없다.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3. 일치(Identity)&lt;/b&gt;
RDBMS는 &lt;b&gt;기본키(primary key)&lt;/b&gt;를 이용하여 동일성을 정의한다. 그러나 자바는 객체 식별(a==b)과 객체 동일성(a.equals(b))을 모두 정의한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;4. 연관성(Associations)&lt;/b&gt;
객체지향 언어는 방향성이 있는 &lt;b&gt;객체의 참조(reference)&lt;/b&gt;를 사용하여 연관성을 나타내지만 RDBMS는 방향성이 없는 외래키(foreign key)를 이용해서 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;5. 탐색(Navigation)&lt;/b&gt;
자바와 RDBMS에서 객체를 접근하는 방법이 근본적으로 다르다. 자바는 그래프형태로 하나의 연결에서 다른 연결로 이동하며 탐색한다. 그러나 RDBMS에서는 
일반적으로 SQL문을 최소화하고 JOIN을 통해 여러 엔티티를 로드하고 원하는 대상 엔티티를 선택하는 방식으로 탐색한다.&lt;/p&gt;

&lt;h3&gt;ORM의 장점과 단점&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;장점&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;객체 지향적인 코드로 인해 더 직관적이고 비즈니스 로직에 더 집중할 수 있게 도와준다.
    &lt;ul&gt;
      &lt;li&gt;선언문, 할당, 종료 같은 부수적인 코드가 없거나 급격히 줄어든다.&lt;/li&gt;
      &lt;li&gt;각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려준다.&lt;/li&gt;
      &lt;li&gt;SQL의 절차적이고 순차적인 접근이 아닌 객체 지향적인 접근으로 인해 생산성이 증가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;재사용 및 유지보수의 편리성이 증가한다.
    &lt;ul&gt;
      &lt;li&gt;ORM은 독립적으로 작성되어있고, 해당 객체들을 재활용 할 수 있다.&lt;/li&gt;
      &lt;li&gt;때문에 모델에서 가공된 데이터를 컨트롤러에 의해 뷰와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리하다.&lt;/li&gt;
      &lt;li&gt;매핑정보가 명확하여, ERD를 보는 것에 대한 의존도를 낮출 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DBMS에 대한 종속성이 줄어든다.
    &lt;ul&gt;
      &lt;li&gt;대부분 ORM 솔루션은 DB에 종속적이지 않다.&lt;/li&gt;
      &lt;li&gt;종속적이지 않다는것은 구현 방법 뿐만아니라 많은 솔루션에서 자료형 타입까지 유효하다.&lt;/li&gt;
      &lt;li&gt;프로그래머는 Object에 집중함으로 극단적으로 DBMS를 교체하는 거대한 작업에도 비교적 적은 리스크와 시간이 소요된다.&lt;/li&gt;
      &lt;li&gt;또한 자바에서 가공할경우 equals, hashCode의 오버라이드 같은 자바의 기능을 이용할 수 있고, 간결하고 빠른 가공이 가능하다.
&lt;b&gt;단점&lt;/b&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;완벽한 ORM 으로만 서비스를 구현하기가 어렵다.
    &lt;ul&gt;
      &lt;li&gt;사용하기는 편하지만 설계는 매우 신중하게 해야한다.&lt;/li&gt;
      &lt;li&gt;프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있다.&lt;/li&gt;
      &lt;li&gt;잘못 구현된 경우에 속도 저하 및 심각할 경우 일관성이 무너지는 문제점이 생길 수 있다.&lt;/li&gt;
      &lt;li&gt;일부 자주 사용되는 대형 쿼리는 속도를 위해 SP를 쓰는등 별도의 튜닝이 필요한 경우가 있다.&lt;/li&gt;
      &lt;li&gt;DBMS의 고유 기능을 이용하기 어렵다. (하지만 이건 단점으로만 볼 수 없다 : 특정 DBMS의 고유기능을 이용하면 이식성이 저하된다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로시저가 많은 시스템에선 ORM의 객체 지향적인 장점을 활용하기 어렵다.
    &lt;ul&gt;
      &lt;li&gt;이미 프로시저가 많은 시스템에선 다시 객체로 바꿔야하며, 그 과정에서 생산성 저하나 리스크가 많이 발생할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
결국 편하자고 사용하는 것이고, 객체지향다운 프로그래밍을 하자는 것이다. 다만, 장점과 단점에서 보았듯이, 원래 OOP와 RDB가 서로를 위하여 만들어 
진 것이 아닌 만큼 ORM을 사용하는 framework들을 사용하는 것도 좋지만, 정확하게 알고 사용해야 하고, 추가적으로 ORM의 한계 혹은 성능저하가 일어
나는 부분에 대하연 추가적인 공부 및 알게된다면 다시 추가 포스팅을 해야할 것 같다.&lt;/p&gt;

&lt;p&gt;출처 
https://geonlee.tistory.com/207 [빠리의 택시 운전사]
&lt;a href=&quot;http://www.incodom.kr/ORM#h_702209f3f35878a32ee91352ddc6bbe7&quot;&gt;장점과 단점&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">MyBatis를 사용하다가 ORM이라는 것을 듣게 되었다. 너무 궁금하니 한번 알아보자.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Java .equals(), hashcode(), ==의 차이점</title>
      <link href="https://sanseongko.github.io/java-evshash" rel="alternate" type="text/html" title="Java .equals(), hashcode(), ==의 차이점" />
      <published>2021-05-26T00:00:00+09:00</published>
      <updated>2021-05-26T00:00:00+09:00</updated>
      <id>https://sanseongko.github.io/java-evshash</id>
      <content type="html" xml:base="https://sanseongko.github.io/java-evshash">&lt;p&gt;오늘은 많이 쓰지만 그래서 이게 뭐가 다르지 했던 ==연산자와 equals()메소드와 hashcode()메소드의 차이에 대하여 알아볼까?
&lt;img src=&quot;./assets/built/images/holololol.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;호롤ㄹ로로ㄹㄹㄹ&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1. 자바에서의 ==연산자&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;==연산자는 비교하는 값이 primitive type(int, double, boolean 등등) 일때는 값이 같은지 비교 하고 
그 외의 객체, reference type(Array, Class 등등)일 때는 가리키는 주소가 같은지 비교하고 리턴값은 같으면 true, 다르면 false이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/77d01a930ab98c5fc2c1cd3eb5eb56e5.js&quot;&gt;&lt;/script&gt;
위와 같이 String으로 변수 선언할 경우 reference type이지만 메모리의 힙영역에 “String”이라는 값이 할당되고 a,b모두 할당된 주소 값을 참조하
기 때문에 true가 반환된다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 위의 코드와 같이 생성자를 이용하여 각 a,b가 각 각각 따로 힙영역에 값을 할당 받을 경우 주소 값이 다르기 때문에 false가 출력된다.
배열의 경우에도 안의 내용이 같더라도 힙영역에 따로 선언되기 때문에 false가 출력된다.&lt;/p&gt;

&lt;p&gt;이와 같이, primitive type일땐 값을 비교, reference type일땐 힙영역에 할당된 주소 값을 비교한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. 자바에서의 .equals()&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;equals() 메소드(Object 클래스의 메소드)의 경우 쉽게 말하면 내용을 비교한다.(배열의 경우 위의 코드에서 array1.equals(array2)라하면 false
가 나온다)
정확하게는 equals메소드에 정의되어 있는 내용대로 값들을 비교해 나간다. 스트링의 equals메소드에 대한 글은 &lt;a href=&quot;https://sas-study.tistory.com/280&quot;&gt;코딩하는 흑구&lt;/a&gt;
이분이 정리를 잘해주신 것 같다. 배열의 경우 Arrays 클래스를 import하여 그 안에 있는 equals메소드를 써야한다.
다만, 내용이 동일하더라도 안에 값이 같은지 확인을 못할 경우가 있다.
예를 들면,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Person [name=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, age=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Person객체를 만들어 아래 정보를 삽입하였다면,&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;person1 == person2는 당연히 false가 나올 것이지만, person.equals(person2)도 false가 나오게 된다. 이는 안의 내용중 name만 맞아도 같은 것으로
봐야하는지 아니면 27까지도 같이 확인을 해야하는지 모르기 때문이다. 이럴 경우에 equals메소드를 오버라이딩하여 다시 정의 해주도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3. 자바에서의 .hashCode()&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;equals메소드하면 항상 같이 나오는 것이 hashCode()이다. 왜냐하면, 안에 내용이 같더라도 각 객체의 해시코드가 다를 경우가 있기 때문이다. 예를들어,
위의 경우에서 equals를 다시 정의하여 같은 값으로 볼 수 있게 정의하였다고 하여도 hash함수를 쓰는 객체가 있다면, 이를 다른 객체로 볼 수 있기 때문이다.
예를 들어, HashSet은 중복을 제거하고 저장해주는 클래스이다. 하지만 person1과 person2를 HashSet안에 담을 경우 해쉬코드가 다르기 때문에 다른 객체라고
판단, 따로 담아 저장해둔다. 이럴 경우도 대비하여 equals메소드를 오버라이딩할때 HashCode도 같이 재정의하여 문제가 없도록 하여야 한다.&lt;/p&gt;

&lt;p&gt;출처
https://jeong-pro.tistory.com/172 [기본기를 쌓는 정아마추어 코딩블로그]
https://sas-study.tistory.com/280 [코딩하는 흑구]&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Ko</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">오늘은 많이 쓰지만 그래서 이게 뭐가 다르지 했던 ==연산자와 equals()메소드와 hashcode()메소드의 차이에 대하여 알아볼까? 호롤ㄹ로로ㄹㄹㄹ</summary>
      

      
      
    </entry>
  
</feed>
