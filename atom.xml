<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>온리 공부를 위한 블로그</description>
    <link>
    https://sanseongKo.github.io</link>
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 더 맵게(힙) 문제</title>
        
          <description>&lt;p&gt;오늘은 힙 카테고리에 있는 더 맵게 문제를 풀어보았다. 우선 처음 한것은 틀렸다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/a5ee8cbed4e69a35de5125ce528638ba.js&quot;&gt;&lt;/script&gt;
처음 코드이고, 이 전에 만든 코드는 리스트를 콜렉션 객체로 sort해주는 것이였는데, 시간복잡도가 너무 높아서 효율성과 런타임에러가 계속 발생하였다.
&lt;br /&gt;
결국 시간안에 풀지 못하고 구글링을 통하여 아이디어를 얻었다.
&lt;br /&gt;
바보 같았던게 알고리즘 힙을 정리할 때 우선순위 큐로 구현된다는 것을 잊고 있었다.(진짜 이건 아닌데…) 우선순위 큐의 경우 시간복잡도가 O(1)이기 때문에,
효율성이 아주 좋을 것이라 생각도 들었고, 밑에는 아이디어를 얻어 다시 만든 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/6ba9d9f0bdc3aef25c6ab7971222684c.js&quot;&gt;&lt;/script&gt;
어차피, 완전 이진트리이고, 트리에 들어갈 때 우선순위에 따라 정렬이 되기 때문에 .peek()의 값이 K를 넘었을 경우엔 모든 값이 K를 넘겼다고 볼 수 있어서,
저렇게 코드를 짯다. 그리고 마지막까지 계산이되었지만, K보다 작을 경우엔 무조건 하나의 노드밖에 존재하지 않기 때문에, 1개가 존재하면서, K보다 작으면 -1을
리턴해주는 것으로 만들었다.
아주 쉬운 문제였는데, 잊고 산게 너무 많다. 이럴 때 한번 더 복습했다 치고, 나중엔 잊지말고 풀 때 접목시켜야겠다.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 28 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-morespicy</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-morespicy</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 H Index(정렬)</title>
        
          <description>&lt;p&gt;오늘은 정렬문제의 마지막 H Index 문제에 대하여 풀어보았다. 솔직히 처음 문제가 이해가 되었다 안 되었다를 반복하며 혼란을 주었고, 풀이와 설명을 들었을 때에도
긴가민가하게 되었고, 코드를 짜면서 이해가 되었다.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-hindex</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-hindex</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 K번째 수(정렬)</title>
        
          <description>&lt;p&gt;이어서, 프로그래머스 코딩테스트 연습의 K번째 수 문제를 풀어보았다. 1단계 문제이니만큼 어렵지 않게 풀어낼 수 있었다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/b39d1045ea0adb9a1784fd3805f6f928.js&quot;&gt;&lt;/script&gt;
해당 코드이고, 들어간 수를 그냥 우선순위 큐에 넣어 정렬시켰다. 그리고 r-1에서 걸리면 해당 que의 맨 처음 노드를 tmp배열에 넣어주었고, 리턴된 값을 answer에 담아 주었다.
또한, tmp의 길이는 무조건 commands 이차원 배열의 길이이기 때문에, 처음부터 설정하여 풀어주었다.
&lt;br /&gt;
밑에는 다른 사람의 풀의의 맨 처음있는 코드이다.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-numberK</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-numberK</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 가장 큰 수 (정렬)</title>
        
          <description>&lt;p&gt;오늘은 프로그래머스의 가장 큰 수 문제를 풀어 보았다. 처음 생각했을 때 문자열로 바꾸어 모든 경우의 수를 구하여 배열에 담는 생각을 하였는데, 그럴 경우
코드가 너무 복잡하였고, 문제 의도와 완전히 다른 것 같아 포기하였다. 이후, 제일 큰수가 만들어 질 때 큰 수 대로 나열하여 만드는 로직을 생각하였지만, 
정렬과는 거리가 멀었다.(예: [6, 70, 7,47]이 들어왔다면, 처음 제일 큰 건 7이고 이후 70이 나오는게 제일 크다, 그리고 6이 나오고 47이 나오는 각 자리의
앞자리가 큰 거부터 나열하고 수가 같은 것이 있다면, 1자리수가 있는지 확인 있다면 두자리 수가 1자리 수보다 크다면 ex. 5와 50~55는 5가먼저, 56~59는
두자리수가 우선순위)
&lt;br /&gt;
아무튼 복잡하다… 빠르게 포기하고 답을 보았는데, comparator클래스의 compare를 오버라이딩하여 문제를 푸는 것이 빠른 것을 확인, 다만 compare오버라이딩이
익숙치 않아 이해하는데 시간이 좀 걸렸다. 
&lt;script src=&quot;https://gist.github.com/sanseongKo/e3e5f0a09da5026e39619f0d9465c35c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-mostlargenumber</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-mostlargenumber</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 다리를 지나는 트럭(스택/큐) 문제</title>
        
          <description>&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습의 다리를 지나는 트럭 문제를 풀어보았다. 
처음에 나는 길이와 트럭의 길이가 문제에 주어져 있지 않아서 트럭의 무게 = 트럭의 길이인줄 알았다. 
그래서 헤메다가 다시 문제를 읽어보니 트럭길이가 1이지 않을까 하는 생각이 들어서 대입하여 풀어보았고, 이게 맞긴했다.
처음 내가 풀었던 코드이다.(실패한 코드)
&lt;script src=&quot;https://gist.github.com/sanseongKo/85a7aeee22a684544a75e14eefd45774.js&quot;&gt;&lt;/script&gt;
실패한 이유는 다리에 올라가 있는 트럭의 무게가 다리가 견딜수 있는 하중보다 작으면 된다라는 점은 동일했다. 하지만, 문제가 되는 부분은 만약 2대의 트럭이 
다리에 올라가 있다고 하고, 다리가 견딜수 있는 하중보다 2대가 같거나 적었을 경우인데, 이중에 한대가 빠져나갔다고하고 다음 들어오는 트럭과 남아있는 한대의
트럭이 합이 하중보다 작을 경우 한대는 끝에 다다르고 한대는 시작점에 있는데 이부분에서 걸리는 시간이 차이가 나는 것이다.&lt;br /&gt;
이 부분을 어떻게 맞춰줘야 할까하여, 결국 구글에 해당 답을 찾아보게 되었고, 문제는 간단했다. 큐에 트럭을 담는 것과 무게를 비교해주는 것은 동일했다.
하지만 큐에 트럭만 담아주는 것이 아닌, 다른 수를 넣어(보통 0을 넣으셨다) que.size()를 다리 길이와 맞춰주고 쉽게 한칸씩 앞으로 간다면, 초를 증가시켜
주면 되는 것이었다.&lt;br /&gt;
밑에는 아이디어를 받고 다시 작성한 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/8246337b3918b309a79de837a4b12482.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</description>
        
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-truck</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-truck</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 주식가격(스택/큐) 문제</title>
        
          <description>&lt;p&gt;다리를 지나가는 트럭 이후에 프로그래머스 스택/큐의 마지막 문제 주식가격의 문제를 풀었다. 한번에 통과되었고, 스택/큐 문제였지만, 안쓰는게 더 나아보여서
그냥 배열로 풀었다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/53d9712294d940d6cd76e9e470cbae2b.js&quot;&gt;&lt;/script&gt;
성공한 코드이고, 효율성도 만족하였다.
그나마 쉬운 문제였다고 생각이 들고 마지막 0을 맞추는 것과, 중간에 time이 0으로 초기화되었는데 수정하였다.&lt;/p&gt;
</description>
        
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-stockprice</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-stockprice</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 위장(해시) 문제</title>
        
          <description>&lt;p&gt;코딩테스트 연습으로 해시의 위장 문제를 풀어보았다.
우선 내가 작성한 코드이고, 물론 실패했다. 친구랑 시간내에 풀기로하여 시간을 맞추지 못했다…
&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/6a98704ee60515c628d4588c470eab79.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-spy</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-spy</guid>
      </item>
      
    
      
      <item>
        <title>프로그래머스 코딩테스트 연습 기능개발(스택/큐) 문제</title>
        
          <description>&lt;p&gt;코딩테스트 연습으로 해시의 위장 문제를 풀어보았다.
우선 내가 작성한 코드이고, 성공했지만, 시간내에 풀지는 못했다…
&lt;br /&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/d6a8351afa53f6b8e414f16997087aa8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-functiondevelop</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-functiondevelop</guid>
      </item>
      
    
      
      <item>
        <title>inflearn강의 Sort and Searching복습</title>
        
          <description>&lt;p&gt;정렬 알고리즘 강의 들은 것에 관하여 정리를 해보려 한다.(요기요 코딩테스트도 오늘 보았다)
첫번째 문제에서는 조건에 맞는 배열의 데이터를 빼내어 다른 배열에 담고, 인덱스를 기억하여 정렬을 하는 것이 핵심이었다.
인덱스를 증가 시켜놓은 상태로, 또는 인덱스를 최대에서 줄이면서, 인덱스를 기억시켜놓고 인덱스에 맞게 정렬을 하는 방식이다.
언제나 문제의 조건을 정리하여 그대로 코딩화하는 것이 중요한 것 같다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-sortcodingclass</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-sortcodingclass</guid>
      </item>
      
    
      
      <item>
        <title>inflearn강의 복습</title>
        
          <description>&lt;p&gt;뭔가 계속 불안해서 결국 인프런의 강의를 질렀다. 강의에서 나오는 내용들 위주로 공부를 진행하려고 한다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-codingclass</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-codingclass</guid>
      </item>
      
    
      
      <item>
        <title>카카오 2021 블라인드 코딩테스트 1번</title>
        
          <description>&lt;h3&gt;문제&lt;/h3&gt;
&lt;p&gt;카카오에 입사한 신입 개발자 네오는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다.
“네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 
아이디를 추천해 주는 프로그램을 개발하는 것입니다.
&lt;br /&gt;
&lt;a href=&quot;https://tech.kakao.com/2021/01/25/2021-kakao-recruitment-round-1/&quot;&gt;문제 자세히 보기&lt;/a&gt;&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/codingtest-2021_kakao01</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/codingtest-2021_kakao01</guid>
      </item>
      
    
      
      <item>
        <title>Spring Security 연습</title>
        
          <description>&lt;p&gt;기술 면접중 스프링 시큐리티에 관하여 질문을 받았고, 대답을 못했다. 돌아가는 모습은 내가 아는 모습은 비슷하지만, 지원을 해주는 것에서 많이 차이가
나는 것 같다. 편한기능이 많고, 알아두면 좋을 것 같다. 물론 어떻게 돌아가는지도 넣을 것이고, 자료는 유튜브 &lt;a href=&quot;https://www.youtube.com/watch?v=riwrVN1JVbU&quot;&gt;데어 프로그래밍&lt;/a&gt;님의
유튜브에서 가져왔고 설명이 잘되어 있는 것 같으니, 궁금할 땐 클릭해서 들어가 보자.(유튜브로 강의를 정말 잘해 놓으셨다.)&lt;/p&gt;

</description>
        
        <pubDate>Sun, 13 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/springsecurity</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/springsecurity</guid>
      </item>
      
    
      
      <item>
        <title>기술 면접 예상 질문</title>
        
          <description>&lt;p&gt;기술 면접에 관하여, 내가 지원하려고 하는 자바, 스프링, 관련 지식 또는 CS관련 지식들을 적고 대답을 적어보는 포스팅을 하려고 한다.
면접에 가서 모른다는 답변을 너무 많이했다… 아는 건데 막상 설명을 하려니 못하겠어서 찾아보고 정리하고 정확하게 말을 할 수 있을 정도가 되었으면 한다.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 13 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/interview</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/interview</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm Greedy(탐욕법)에 관하여</title>
        
          <description>&lt;p&gt;오늘은 알고리즘 중 하나인 Greedy에 관하여 알아보도록 하겠다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 11 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-greedy</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-greedy</guid>
      </item>
      
    
      
      <item>
        <title>Java REST API 실습</title>
        
          <description>&lt;p&gt;REST API를 너무 해보고 싶어 하나 하나 전부 뜯어 보려한다. 강의를 사서 볼까도 했지만, 오기가 생겨서 다 찾아보고 적어보려고 한다. 스프링 부트의 
어노테이션에 관한 것도 같이 올릴 것이다. 또한 하루만에 완성하는 포스팅이 아니기 때문에, 수정날짜를 밑에 적도록 하겠다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 10 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/java-restapipractice</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/java-restapipractice</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm 완전 탐색에 관하여</title>
        
          <description>&lt;p&gt;오늘은 알고리즘 중 하나인 완전 탐색 알고리즘에 대하여 알아보려고 한다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-Exhaustive-Search</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-Exhaustive-Search</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm 정렬에 관하여</title>
        
          <description>&lt;p&gt;오늘은 정렬의 종류와 각 종류의 장단점에 대하여 알아보려한다. &lt;br /&gt;
여러가지 정렬이 있지만 기본적으로 그리고 내가 알고 싶은 정렬에 대하여 알아보려한다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 31 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-sort</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-sort</guid>
      </item>
      
    
      
      <item>
        <title>Java RESTful API 개념 정리</title>
        
          <description>&lt;p&gt;오늘은 RESTful API에 대하여 정리해보려고 한다.
RESTful API를 알기전에 REST와 RESTful의 차이를 알아야 한다.
REST란, 분산시스템 설계를 위한 &lt;b&gt;아키텍처 스타일&lt;/b&gt;이다. 즉, 제약 조건의 집합이라고 볼 수 있다. 
그렇다면, RESTful은 무엇일까? RESTful은 제약조건의 집합 즉, 아키텍처 스타일, 아키텍처 원칙을 모두 만족하는 것을 의미한다.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 30 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/java-restapi</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/java-restapi</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm Heap에 관하여</title>
        
          <description>&lt;p&gt;오늘은 자료구조 힙에 관하여 알아보자.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 28 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-heap</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-heap</guid>
      </item>
      
    
      
      <item>
        <title>Java ORM이란?</title>
        
          <description>&lt;p&gt;MyBatis를 사용하다가 ORM이라는 것을 듣게 되었다. 너무 궁금하니 한번 알아보자.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 27 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/java-orm</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/java-orm</guid>
      </item>
      
    
      
      <item>
        <title>Java JPA란?</title>
        
          <description>
</description>
        
        <pubDate>Thu, 27 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/java-jpa</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/java-jpa</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm Stack and Queue에 관하여</title>
        
          <description>&lt;p&gt;오늘은 스택과 큐라는 알고리즘을 알아보도록 하겠다. 
스택과 큐를 같이 묶어서 포스팅하는 이유는 비슷한 느낌이자만 차이가 분명하게 존재하기 때문이다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 27 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-stackqueue</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-stackqueue</guid>
      </item>
      
    
      
      <item>
        <title>Java .equals(), hashcode(), ==의 차이점</title>
        
          <description>&lt;p&gt;오늘은 많이 쓰지만 그래서 이게 뭐가 다르지 했던 ==연산자와 equals()메소드와 hashcode()메소드의 차이에 대하여 알아볼까?
&lt;img src=&quot;./assets/built/images/holololol.jpg&quot; alt=&quot;ex_screenshot&quot; /&gt;호롤ㄹ로로ㄹㄹㄹ&lt;/p&gt;

</description>
        
        <pubDate>Wed, 26 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/java-evshash</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/java-evshash</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm 동적 계획법에 관하여</title>
        
          <description>&lt;h3&gt;동적 계획법&lt;/h3&gt;
&lt;p&gt;동적 계획법이란, 보다 큰 문제를 작은 문제로 나누어 푸는 방식을 뜻한다. 이 부분은 분할과 정복과 유사한데, 분할과 정복은 중복이 절대 일어날 수 없다
는 것이고, 동적 계획법에서는 문제가 중복된다는 점이다. 이 부분에서 동적 계획법은 중복으로 일어난 작은 문제에 대하여 그 문제에 사용되었던 방식을, 값을
캐시(cache)라 불리는 메모리에 미리 넣어두고 중복되는 문제를 마주칠 시에 미리 저장되어 있던 값을 꺼내어 사용하는 것이다.(Memoization 메모이제이션)
&lt;img src=&quot;./assets/built/images/algorithm/dynamic/dynamic.png&quot; alt=&quot;ex_screenshot&quot; /&gt;
위의 사진에서 보이는 대로 f(3)의 f(2)의 검은색 부분이 겹치기 때문에, 이 값들은 캐시에 저장해두고 쓸 수 있다. 미리 값을 정해두고 계산을 하는 것이기
때문에 시간이 단축된다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 25 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-dynamicprogramming</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-dynamicprogramming</guid>
      </item>
      
    
      
      <item>
        <title>Algorithm Hash에 관하여</title>
        
          <description>&lt;p&gt;오늘은 Hash에 대하여 정리를 해보려고 한다.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 25 May 2021 00:00:00 +0900</pubDate>
        <link>
        https://sanseongKo.github.io/algorithm-hash</link>
        <guid isPermaLink="true">https://sanseongKo.github.io/algorithm-hash</guid>
      </item>
      
    
  </channel>
</rss>
