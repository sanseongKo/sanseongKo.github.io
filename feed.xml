<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://sanseongko.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sanseongko.github.io/" rel="alternate" type="text/html" /><updated>2021-07-21T20:16:16+09:00</updated><id>https://sanseongko.github.io/feed.xml</id><title type="html">SanseongKo’s Blog</title><subtitle>온리 공부를 위한 블로그</subtitle><entry><title type="html">기술 면접 예상 질문(객체지향의 정의와 특징)</title><link href="https://sanseongko.github.io/interview" rel="alternate" type="text/html" title="기술 면접 예상 질문(객체지향의 정의와 특징)" /><published>2021-07-21T00:00:00+09:00</published><updated>2021-07-21T00:00:00+09:00</updated><id>https://sanseongko.github.io/interview</id><content type="html" xml:base="https://sanseongko.github.io/interview">&lt;h1&gt;객체지향의 정의&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;객체가 중심&lt;/b&gt;이 되며, 누가 어떤 일을 할 것인지가 핵심이다.(절차지향: 기능 중심으로 무엇을 어떤 ‘절차’로 할 것인지가 포인트) 필요한 객체들을 파악하고,
객체들의 역할을 정의하고 객체들간의 상호작용으로 프로그램을 구현하는 것을 의미한다. (객체는 실제하는 모든 것을 객체라고 할 수 있고, 그렇게 때문에 객체간의 상호작용들을
실제 각 사물들의 상호작용을 이해하는 것을 생각하면 쉬울 것 같다.)&lt;/p&gt;

&lt;h1&gt;객체지향의 특징&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;b&gt;추상화&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;객체들의 공통적인 기능이나 속성(특징)을 도출하는 것을 의미하고 자바에서는 클래스를 정의하는 것이 추상화라 할 수 있다.&lt;/li&gt;
      &lt;li&gt;반복되는 부분을 계속 정의하는 것이 아닌 공통적인 속성을 뽑아내어 추상시켜 필요할 때마다 객체로 만들어 사용하는 것을 의미한다고 생각한다.
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;캡슐화&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;실제로 구현되는 부분은 외부에 드러나지 않도록 정보를 은닉하는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;객체가 독립적으로 역할을 수행할 수 있도록 데이터와 기능을 하나로 묶는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;코드가 묶여 있기 때문에 오류가 없어 편리하다.(외부의 객체가 특정 객체의 데이터에 직접 접근하거나 변경할 수 없기 때문)&lt;/li&gt;
      &lt;li&gt;데이터를 보지 않고 외부와 상호작용할 떄 메소드를 사용하여 통신한다.(보통 Library로 만들어 업그레이드하여 사용이 가능하다.)
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;상속성&lt;/b&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;하나의 클래스가 가진 특징을 다른 클래스가 그대로 물려받는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;이미 작성된 클래스를 받아 새로운 클래스로 생성하는 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;기존코드를 재사용할 수 있다.
&lt;br /&gt;
4.&lt;b&gt;다형성&lt;/b&gt;&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;약간 다른 방법으로 동작하는 함수를 동일한 이름으로 호출 -&amp;gt; 연결된 객체에 의존&lt;/li&gt;
      &lt;li&gt;오버라이딩: 부모클래스의 메소드와 이름과 매개변수는 같지만 &lt;b&gt;내부 소스코드&lt;/b&gt;가 재정의 된 것을 의미한다.&lt;/li&gt;
      &lt;li&gt;오버로딩: 같은 이름의 함수를 여러개 정의하고, 매개변수를 다르게 설정하여 같은 이름의 메소드를 경우에 따라 호출하는 것을 의미한다.
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;객체 지향의 장점&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;생산성이 향상된다 -&amp;gt; 재사용을 지향하기 때문(다형성, 객체, 캡슐화)으로, 소프트웨어를 자성할 때의 부담을 줄인다.(코드의 재사용, 추상화 시켜놓은 것들이기 때문)&lt;/li&gt;
  &lt;li&gt;현실 세계의 것들을 객체로 만들었기 때문에 우리가 생각하는 것 현실에서 일어나는 것들을 프로그래밍화하기 쉽다.&lt;/li&gt;
  &lt;li&gt;유지보수(프로그램 수정, 추가 등)이 뛰어나다. -&amp;gt; 캡슐화로 내부의 내용이 바뀌더라도 사용법이 달라지지 않고, 데이터가 변경되도 다른 객체에 영향을 주지 않기 때문에
독립성이 유지된다. 연결되어 프로그램에 변경에도 외부에서 변경이 안되기 때문에, 오류의 파급이 적다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;객체 지향의 단점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;실행 속도가 느리다!
&lt;br /&gt;
최근 면접에서 당연히 알고 있는 것이라 생각했던 것이 막상 머리속에 추상적으로는 떠오르는데 단어선택이 안되고 포기해버리게 되는 자신을 발견하고 면접관님한테 너무 죄송했고,
너무 답답하였다.(내가 당사자였다면 진짜 무례하다고 생각했을 것 같다.)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ko</name></author><category term="interview" /><summary type="html">객체지향의 정의 객체가 중심이 되며, 누가 어떤 일을 할 것인지가 핵심이다.(절차지향: 기능 중심으로 무엇을 어떤 ‘절차’로 할 것인지가 포인트) 필요한 객체들을 파악하고, 객체들의 역할을 정의하고 객체들간의 상호작용으로 프로그램을 구현하는 것을 의미한다. (객체는 실제하는 모든 것을 객체라고 할 수 있고, 그렇게 때문에 객체간의 상호작용들을 실제 각 사물들의 상호작용을 이해하는 것을 생각하면 쉬울 것 같다.)</summary></entry><entry><title type="html">Abstract Class vs Interface</title><link href="https://sanseongko.github.io/interview2" rel="alternate" type="text/html" title="Abstract Class vs Interface" /><published>2021-07-21T00:00:00+09:00</published><updated>2021-07-21T00:00:00+09:00</updated><id>https://sanseongko.github.io/interview2</id><content type="html" xml:base="https://sanseongko.github.io/interview2">&lt;h1&gt;추상클래스&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;정의&lt;/b&gt;: 클래스 구현 내부에 추상메서드가 하나이상 포함되거나, Abstract로 정의된 경우&lt;br /&gt;
공통의 자료형이라고 할 수 있는 추상클래스가 가지고 있는 공통 서비스 함수이다. 다만, 공통 서비스이지만 구현이 공통이 아닌 &lt;b&gt;서비스라고 하는 목록&lt;/b&gt;이 공통인 것을 의미&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;new 연산자를 사용해 객체를 생성할 수 없다.&lt;/li&gt;
  &lt;li&gt;추상클래스(부모)와 자식 클래스(자식)의 상속관계에 놓여있다.&lt;/li&gt;
  &lt;li&gt;새로운 일반 클래스를위한 부모 클래스의 용도로만 사용이 된다.&lt;/li&gt;
  &lt;li&gt;일반 클래스들의 필드와 메소드를 통일하여 일반 클래스의 작성시 시간 절약이 가능하다.&lt;/li&gt;
  &lt;li&gt;단일 상속만 가능하다. 일반 변수를 가질 수 없다.&lt;/li&gt;
  &lt;li&gt;동일한 클래스를 묶는 개념으로 상속받아 &lt;b&gt;기능을 향상시키는 것&lt;/b&gt;이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;인터페이스&lt;/h1&gt;
&lt;p&gt;&lt;b&gt;정의&lt;/b&gt;: 모든 메서드가 추상 메서드인 경우이다.&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스는 static final 필드만 가질 수 있다. (다만 선언할 때 public *static *final이 생략된 것으로 생각함)&lt;/li&gt;
  &lt;li&gt;static final 필드만 가질 수 있는 이유는 구현 객체가 같은 동작을 보장하기 위한 목적, 인터페이스의 변수는 스스로 초기화 될 권한이 없고, 아무 *인스턴스도 존재하지 않는 시점이기 때문이다.&lt;/li&gt;
  &lt;li&gt;new 연산자를 사용해 객체를 생성할 수 없다.&lt;/li&gt;
  &lt;li&gt;다중 상속이 가능하다.&lt;/li&gt;
  &lt;li&gt;구현 객체가 같은 동작을 한다는 것을 보장하는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;공통점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;추상클래스와 인터페이스 모두 선언은 있지만, 구현은 없다는 것&lt;/li&gt;
  &lt;li&gt;인스턴스화를 할 수 없다&lt;/li&gt;
  &lt;li&gt;추상클래스를 extends한 자식들과 인터페이스를 implements하여 구현한 자식들만 객체 생성이 가능하다.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;차이점&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;추상클래스&lt;/td&gt;
          &lt;td&gt;인터페이스&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;단일 상속&lt;/td&gt;
          &lt;td&gt;다중 상속&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;상속을 받아서 기능을 확장시키는 것이 목적 | 구현하는 모든 모든 클래스에 대해 특정한 메서드가 반드시 존재하도록 강제하는 역할(구현객체가 같은 동작하여야 한다)&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;*&lt;/h1&gt;
&lt;p&gt;static: 정적변수라고 하며 static이 붙으면 메모리에 딱 한번 할당되어진다.
final: 변수의 값이 더이상 변하길 원치 않는다면 붙인다.
instance: 클래스를 바탕으로 구현된 구체적인 실체(객체는 구현할 대상)이다.&lt;/p&gt;</content><author><name>Ko</name></author><category term="interview" /><summary type="html">추상클래스 정의: 클래스 구현 내부에 추상메서드가 하나이상 포함되거나, Abstract로 정의된 경우 공통의 자료형이라고 할 수 있는 추상클래스가 가지고 있는 공통 서비스 함수이다. 다만, 공통 서비스이지만 구현이 공통이 아닌 서비스라고 하는 목록이 공통인 것을 의미</summary></entry><entry><title type="html">카카오 2019 블라인드 코딩테스트 2번</title><link href="https://sanseongko.github.io/codingtest-2019_kakao02" rel="alternate" type="text/html" title="카카오 2019 블라인드 코딩테스트 2번" /><published>2021-07-08T00:00:00+09:00</published><updated>2021-07-08T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-2019_kakao02</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-2019_kakao02">&lt;p&gt;&lt;a href=&quot;https://www.welcomekakao.com/learn/courses/30/lessons/42889&quot;&gt;문제보기&lt;/a&gt;
오늘은 카카오 2019년 공채 1차의 코딩테스트의 2번문제를 풀어보았다. 밑은 작성코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/1f289f668e1a9da89ea37e391ccc1d01.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;우선 처음 실패한 사람의 수를 세어주어야하고, 실패한 사람이 카운트가되면 그만큼 남아있는 사람의 수를 줄여주는 것이 첫번째이다. 두번째는 실패율이기 때문에,
다른 방법도 되지만, 나는 double을 사용하여 소수점을 구하게 하였다(integer로 설정하게 되면, 값이 전부 0 이나오게 됨). 그렇게하여 스테이지를 키값 
실패율을 값으로 설정하여 hashmap을 사용하여 넣어주고, comparator의 오버라이딩을 통하여 값으로 정렬해주고 Entry에 들어있는 값에 키값을 가져와서 
answer 배열에 하나씩 넣어주는 방법을 하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;새로 알게 된 것&lt;/b&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;살짝 부끄럽긴한데 처음 값이 0이 나왔을 때 당황하였다. 소수는 double을 쓰자…&lt;/li&gt;
  &lt;li&gt;Entry를 사용하여 collection객체인 map도 키값에 따라 키에따른 값에 대해서도 정렬이 가능하다는 것을 알았다. 물론 compareTo메소드를 오버라이드 해야하지만,
정렬에서는 기본이니.. 알아두자&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">문제보기 오늘은 카카오 2019년 공채 1차의 코딩테스트의 2번문제를 풀어보았다. 밑은 작성코드이다.</summary></entry><entry><title type="html">카카오 2019 블라인드 코딩테스트 1번</title><link href="https://sanseongko.github.io/codingtest-2019_kakao01" rel="alternate" type="text/html" title="카카오 2019 블라인드 코딩테스트 1번" /><published>2021-07-07T00:00:00+09:00</published><updated>2021-07-07T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-2019_kakao01</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-2019_kakao01">&lt;p&gt;&lt;a href=&quot;https://www.welcomekakao.com/learn/courses/30/lessons/42888?language=java&quot;&gt;문제보기&lt;/a&gt;
&lt;br /&gt;
&lt;b&gt;작성한코드&lt;/b&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/23e8a1902c530b6de9feebc524a58180.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;처음 문제를 접했을 때, 프로젝트 때 로그인을 해봤던 기억이나서 세션이랑 자꾸 연결이 되었다. 세션을 써도되는것인가…하며 생각하다가 아니다싶어 다른 코드를
짰다. 
&lt;br /&gt;
문제가 되는 부분은
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;한 사람이 Leave 하고 아이디를 변경하여 들어왔을 경우&lt;/li&gt;
  &lt;li&gt;채팅창에 있으면서 Change를 했을 경우
&lt;br /&gt;
이 두가지가 제일 걸렸다. 처음부터 맵을 쓰자니 uid를 키로 했을 경우 동작을 담기가 힘들었고, 중복되는 키값일 경우 안에 내용이 변경되는 경우가 생겼다.(HashMap을 썻을 경우 둘다 처리 어려움,
LinkedHashMap을 썻을 경우 동작을 담기가 힘듬) 그렇기 때문에, 각 문자열들을 담고 uid를 ArrayList에 같이 담아주었다.(약간 자바에서 세션객체를 제공하지 않을 때, 예전
세션정보를 body에 담는 느낌?이랑 비슷한…) uid로 비교해주고 변화가 일어나는 부분은 Change와 Leave이후 Enter했을 때 두 경우만 처리해주면 되기 때문에
어려울 것은 없었다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;b&gt;아쉬웠던 점&lt;/b&gt;
&lt;br /&gt;
처음 어떤 것을 써서 구현해야 할까 할 때 시간이 너무 소요된다. 정확하게 생각이 안나고 문제를 풀다가도 추가적으로 넣는 부분이 생기다보니, TDD를 연습해야하나…
그건 또 아닌가.. 모르겠다. 익숙해 질 수 밖에…&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">문제보기 작성한코드</summary></entry><entry><title type="html">프로그래머스 코딩테스트 조이스틱(탐욕법)</title><link href="https://sanseongko.github.io/codingtest-joystick" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 조이스틱(탐욕법)" /><published>2021-07-06T00:00:00+09:00</published><updated>2021-07-06T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-joystick</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-joystick">&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습에 있는 조이스틱 문제에 대하여 풀어보았다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42860&quot;&gt;문제 풀어보기&lt;/a&gt;
&lt;br /&gt;
조이스틱의 위아래로 움직여 알파벳을 찾는 것까지는 구현을 하였다. 하지만 좌우로 움직여 최소 움직임을 찾는거에서 완전히 막혀버려 결국 답을 찾아보았다…
&lt;br /&gt;
실패코드&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//65~90  65 66 25&lt;/span&gt;
        	&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;        	
        	&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        		&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;찾아본 성공코드
&lt;script src=&quot;https://gist.github.com/sanseongKo/404c09543bd272efd6f0ee3ecc23aeaf.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;해당코드는 &lt;a href=&quot;https://hellodavid.tistory.com/4&quot;&gt;오늘의 개발&lt;/a&gt;님의 코드를 가져왔으며, 이분 뿐만아니라 다른 분들도 좌우로 움직이는 부분은 인덱스로
위치를 저장해두고 저장된 인덱스를 기준으로 Math.min() 메소드를 이용하여 최소 움직임을 찾아내는 것을 확인하였다.
&lt;br /&gt;
(i * 2) + len - nextIndex
&lt;br /&gt;
정말 이 식을 찾아내지 못한다면, 어떻게 풀어야할지 감이 안잡힌다. 해당 식은 왔던길을 다시 되돌아가는(i*2)에 모든 길이(len)를 더하고 A가 있는 부분은
모두 nextIndex로 위치를 올렸기 때문에 빼주면 되돌아온 최소움직임이 완성이 된다.
&lt;br /&gt;
하지만 문제 자체가 많이 어려운 것 같다보니, 테스트코드만 맞는 코드도 있고, 다른 테스트 코드를 적용하면 기댓값이 맞지 않는 코드도 많은 것 같다. 
&lt;br /&gt;
&lt;b&gt;알게 된 것&lt;/b&gt;
혹여라도 좌우로 움직이는 것을 찾을 때 (i * 2) + len - nextIndex 해당 식을 이용하면 좋을 것 같다. 풀다보면 반복되는 것이 있을 것이고 지금 모른다고 하더라도
다음에도 모르면 안된다는 마음가짐으로 해야겠다. (어렵다 후…)&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">오늘은 프로그래머스 코딩테스트 연습에 있는 조이스틱 문제에 대하여 풀어보았다. 문제 풀어보기 조이스틱의 위아래로 움직여 알파벳을 찾는 것까지는 구현을 하였다. 하지만 좌우로 움직여 최소 움직임을 찾는거에서 완전히 막혀버려 결국 답을 찾아보았다… 실패코드 public static int solution(String name) { int answer = 0; char[] arr = name.toCharArray(); char[] arr2 = name.toCharArray(); int tmp = 0; int tmp2 = 0; if(arr.equals(arr2))return answer; for(int i =0; i&amp;lt;arr.length;i++) {//65~90 65 66 25 arr[i] = 'A'; tmp = (int)arr2[i] - (int)arr[i]; tmp2 = 26 - tmp; if(tmp2&amp;lt;0)tmp2 = tmp2*-1; if(tmp&amp;gt;tmp2) { answer +=tmp2; }else { answer+=tmp; } } answer += min(name); return answer; } public static int min(String name) { int result = 0; return result; }</summary></entry><entry><title type="html">프로그래머스 코딩테스트 체육복(탐욕법)</title><link href="https://sanseongko.github.io/codingtest-trainingcloth" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 체육복(탐욕법)" /><published>2021-07-05T00:00:00+09:00</published><updated>2021-07-05T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-trainingcloth</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-trainingcloth">&lt;p&gt;오늘은 프로그래머스 코딩테스트 연습에 있는 탐욕법 문제를 풀어보았다. 1레벨 단계의 문제이다보니 어렵지 않았지만, 탐욕법을 적용하여 풀려고하니 조금 꼬이는 
부분이 생기긴 했다.
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42862&quot;&gt;문제풀어보기&lt;/a&gt;
&lt;br /&gt;
밑은 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/c8724699ecf4169fe7ff18bff775638e.js&quot;&gt;&lt;/script&gt;
탐욕법 문제이니만큼 매순간 최적의 선택을 하여야 하고, 처음 내가 문제를 풀었을 땐, flag기법으로 각 배열의 위치로 boolean 배열을 만들어 사용하였지만, 
그렇게 되면, 가능은 하겠지만, 여벌의 옷이 있지만 받지 못하는 경우를 처리하기에 힘들어서 정수배열로 만들어 처리하였다. 만약 1,3이 lost에 들어잇고, 2,4가 
reserve에 들어잇고 n이 5명 이상일 때, 처음 코드에서는 3번이 4번의 옷을 가져가게되면 2번이 옆의 옷이 없다는 것으로 가정하여 옷을 받지 못하는 경우가 생긴다.
이럴 경우를 위하여 위의 코드로 처리하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;오늘 배운 것&lt;/b&gt;
탐욕법은 매 순간 최선의 선택을 하여야하고 다른 것은 절대 신경쓰면 안된다. 그렇기 때문에, 최선의 선택이 전체적으로 봤을 때 올바른 선택이 되어야 한다.
문제를 풀 때 매순간이 최선의 선택인지 확인하고 혹시 빠진 것이 없는지를 주의하며 문제를 풀어나가야하겠다.&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">오늘은 프로그래머스 코딩테스트 연습에 있는 탐욕법 문제를 풀어보았다. 1레벨 단계의 문제이다보니 어렵지 않았지만, 탐욕법을 적용하여 풀려고하니 조금 꼬이는 부분이 생기긴 했다. 문제풀어보기 밑은 정답 코드이다. 탐욕법 문제이니만큼 매순간 최적의 선택을 하여야 하고, 처음 내가 문제를 풀었을 땐, flag기법으로 각 배열의 위치로 boolean 배열을 만들어 사용하였지만, 그렇게 되면, 가능은 하겠지만, 여벌의 옷이 있지만 받지 못하는 경우를 처리하기에 힘들어서 정수배열로 만들어 처리하였다. 만약 1,3이 lost에 들어잇고, 2,4가 reserve에 들어잇고 n이 5명 이상일 때, 처음 코드에서는 3번이 4번의 옷을 가져가게되면 2번이 옆의 옷이 없다는 것으로 가정하여 옷을 받지 못하는 경우가 생긴다. 이럴 경우를 위하여 위의 코드로 처리하였다.</summary></entry><entry><title type="html">프로그래머스 코딩테스트 소수 카페트(완전탐색)</title><link href="https://sanseongko.github.io/codingtest-carpet" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 소수 카페트(완전탐색)" /><published>2021-07-04T00:00:00+09:00</published><updated>2021-07-04T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-carpet</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-carpet">&lt;p&gt;오늘은 프로그래머스 코딩테스트연습에 마지막 완전탐색 문제 카페트에서 대하여 풀어보았다. 갈색과 노란색의 합으로 나올 수 있는 사각형의 가로와 세로를
모두 구하고, 구한 것을 바탕으로 (가로-2)*(세로-2)가 노란색이 되는 것을 이용하였다.
&lt;br /&gt;
밑은 코드이고, &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42842&quot;&gt;풀어보기&lt;/a&gt;
&lt;script src=&quot;https://gist.github.com/sanseongKo/dc17d5db4ece03aa6ce62203c7802912.js&quot;&gt;&lt;/script&gt;
사실 다른 코드는 쉽지만 노란색을 구하지 못한다면, 가로와 세로는 구할 수 있겠지만, 갈색의 개수와 노란색의 개수가 다를 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
요즘 코딩테스트 문제를 풀면서 생각하는 것이지만, 알고리즘이 문제가 아니다… 규칙찾아내는 것이 더힘들다…&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">오늘은 프로그래머스 코딩테스트연습에 마지막 완전탐색 문제 카페트에서 대하여 풀어보았다. 갈색과 노란색의 합으로 나올 수 있는 사각형의 가로와 세로를 모두 구하고, 구한 것을 바탕으로 (가로-2)*(세로-2)가 노란색이 되는 것을 이용하였다. 밑은 코드이고, 풀어보기 사실 다른 코드는 쉽지만 노란색을 구하지 못한다면, 가로와 세로는 구할 수 있겠지만, 갈색의 개수와 노란색의 개수가 다를 수 있다.</summary></entry><entry><title type="html">프로그래머스 코딩테스트 소수 찾기(완전탐색)</title><link href="https://sanseongko.github.io/codingtest-findPrimenuber" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 소수 찾기(완전탐색)" /><published>2021-07-03T00:00:00+09:00</published><updated>2021-07-03T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-findPrimenuber</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-findPrimenuber">&lt;p&gt;오늘은 프로그래머스 완전탐색에 있는 소수찾는 문제를 풀어보았다. 실제로는 풀지 못하였고, 소수를 찾기 위하여 제곱근을 사용하는 방법까지는 알고 있었지만,
재귀함수를 통하여 나올 수 있는 모든 수를 탐색하는 것이 아직 너무 익숙치 않았다.(재귀함수 ㅂㄷㅂㄷ…)
&lt;br /&gt;
&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42839&quot;&gt;풀어보기&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sanseongKo/4c3c7996a5d97e473087a67fd529f2bf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;코드는 &lt;a href=&quot;https://hidelookit.tistory.com/67&quot;&gt;숨어보는 IT&lt;/a&gt;님의 코드를 참고하여 만들었고, 중요한 부분은 소수를 찾는 부분보다 들어온 문자열을 가지고
나올 수 있는 모든 수를 찾는 것이 더 중요한 것 같다. 해당 코드에서는 boolean값으로 처음 cycle메소드를 호출하였을 때 해당하는 수를 true로 바꿔주고 
true라면 다시 쓰이지 않도록 하였다. 또한 마지막에 다시 false로 바꿔주며 start가 증가할 때 처음부터 확인하기 위하여 설정이 되어 있다. end는 호출하는 곳의
i값을 써서 1자리수 2자리수 3자리수로 나올 수 있는 값들을 알아내기 위한 것이다. 
&lt;br /&gt;
재귀함수를 이용하여 알고리즘 문제를 푸는 것이 아직 익숙치 않고, 이렇게하면 되지 않을까하는 생각은 들지만 머리로 순간적으로 그려지지 않다보니 많은 어려움을
겪는 것 같다. 많은 시간 투자와 노력이 필요하지 않을까 싶다. 완전탐색 또는 BFS DFS에 재귀함수를 조금 적극적으로 써볼 필요성이 느껴진다. 그리고 조합을 풀 때
boolean값으로 방문한 값을 확인하는 것을 많이 쓰기 때문에, 알아두고 두고두고 사용하여야할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;b&gt;알게 된 것&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Math.sqrt() : 숫자의 제곱근을 구해주는 메소드이다.&lt;/li&gt;
  &lt;li&gt;flag를 이용한 완전탐색: false와 true로 각 자리의 숫자가 쓰인적이 있는지 확인하는 기법이 많이 사용되는 것 같다. 익숙해지자.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">오늘은 프로그래머스 완전탐색에 있는 소수찾는 문제를 풀어보았다. 실제로는 풀지 못하였고, 소수를 찾기 위하여 제곱근을 사용하는 방법까지는 알고 있었지만, 재귀함수를 통하여 나올 수 있는 모든 수를 탐색하는 것이 아직 너무 익숙치 않았다.(재귀함수 ㅂㄷㅂㄷ…) 풀어보기</summary></entry><entry><title type="html">프로그래머스 코딩테스트 연습 모의고사(완전탐색)</title><link href="https://sanseongko.github.io/codingtest-moctest" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 모의고사(완전탐색)" /><published>2021-07-02T00:00:00+09:00</published><updated>2021-07-02T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-moctest</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-moctest">&lt;p&gt;이어서, 완전탐색의 첫번째 문제인 모의고사를 풀게되었다. 밑에는 정답코드이고 1단계이다보니, 문제가 쉬운 편이였다.&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42840&quot;&gt;문제풀어보기&lt;/a&gt;
밑에는 정답 코드이다.
&lt;script src=&quot;https://gist.github.com/sanseongKo/7876d20455724eccc29f8ededbc9d309.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;이 문제에서 제일 중요한 것은 사실 각 수포자들의 값을 answers의 배열길이만큼 반복시키는 것이고 이 부분을 나머지를 구하는 것으로 해결하였고, 다음은
Math.max()안에 다른 max메소드를 사용하여 3개의 값을 동시에 비교하는 것이다. 이렇게하여 모든 값들을 확인하여 최대값을 구하고 같은 값을 걸러내는 코드를
작성하면 되었다.&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">이어서, 완전탐색의 첫번째 문제인 모의고사를 풀게되었다. 밑에는 정답코드이고 1단계이다보니, 문제가 쉬운 편이였다.문제풀어보기 밑에는 정답 코드이다.</summary></entry><entry><title type="html">프로그래머스 코딩테스트 연습 H Index(정렬)</title><link href="https://sanseongko.github.io/codingtest-hindex" rel="alternate" type="text/html" title="프로그래머스 코딩테스트 연습 H Index(정렬)" /><published>2021-07-02T00:00:00+09:00</published><updated>2021-07-02T00:00:00+09:00</updated><id>https://sanseongko.github.io/codingtest-hindex</id><content type="html" xml:base="https://sanseongko.github.io/codingtest-hindex">&lt;p&gt;오늘은 정렬문제의 마지막 H Index 문제에 대하여 풀어보았다. 솔직히 처음 문제가 이해가 되었다 안 되었다를 반복하며 혼란을 주었고, 풀이와 설명을 들었을 때에도
긴가민가하게 되었고, 코드를 짜면서 이해가 되었다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sanseongKo/8046b9e195eb14e2a70316354fd58043.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;정답 코드이며, 문제는 h를 처음 배열의 길이만큼 주고(h는 배열의 길이를 넘어갈 수 없다.) 배열을 정렬한다. 그럼 for문안에서 h를 계속 감소시켜 문제를 풀었다.&lt;br /&gt;
같이 공부하는 친구에게 설명을 듣고, h가 감소할 때 결국 그 값 보다 큰 값들이 h보다 같거나 많은 경우에 정답이 될 수 있었고, h가 밑에서 부터 올라온다면,
처음 수가 작을 경우 그 값을 리턴할 경우가 있기 때문에(이경우엔 h보다 작거나 같은 것을 구하면 될 것) 감소시켰다. 결국 감소되며 if문을 검사 받을 때 크거나 같다면
h-1번째 이후는 모드 그 값보다 크기 때문에 답이 될 수 있다.&lt;/p&gt;</content><author><name>Ko</name></author><category term="codingtest" /><summary type="html">오늘은 정렬문제의 마지막 H Index 문제에 대하여 풀어보았다. 솔직히 처음 문제가 이해가 되었다 안 되었다를 반복하며 혼란을 주었고, 풀이와 설명을 들었을 때에도 긴가민가하게 되었고, 코드를 짜면서 이해가 되었다.</summary></entry></feed>